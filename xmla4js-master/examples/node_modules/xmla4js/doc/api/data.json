{
    "project": {},
    "files": {
        "src/Xmla.js": {
            "name": "src/Xmla.js",
            "modules": {
                "xmla": 1
            },
            "classes": {
                "Xmla": 1,
                "Xmla.Rowset": 1,
                "Xmla.Dataset": 1,
                "Xmla.Dataset.Axis": 1,
                "Xmla.Dataset.Cellset": 1,
                "Xmla.Exception": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "xmla": {
            "name": "xmla",
            "submodules": {},
            "classes": {
                "Xmla": 1,
                "Xmla.Rowset": 1,
                "Xmla.Dataset": 1,
                "Xmla.Dataset.Axis": 1,
                "Xmla.Dataset.Cellset": 1,
                "Xmla.Exception": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/Xmla.js",
            "line": 6705,
            "description": "This is xmla4js - a stand-alone, cross-browser javascript library for working with \"XML for Analysis\".\n  XML for Analysis (XML/A) is a vendor-neutral industry-standard protocol for OLAP services over HTTP.\n  xmla4js enables web-browser-based analytical business intelligence applications.",
            "title": "Xmla"
        }
    },
    "classes": {
        "Xmla": {
            "name": "Xmla",
            "shortname": "Xmla",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xmla",
            "namespace": "",
            "file": "src/Xmla.js",
            "line": 617,
            "description": "The Xmla class provides a javascript API to communicate XML for Analysis (XML/A) over HTTP.\n   XML/A is an industry standard protocol that allows webclients to work with OLAP servers.\n   To fully understand the scope and purpose of this utility, it is highly recommended\n   to read <a href=\"http://xmla.org/xmla1.1.doc\">the XML/A specification</a>\n   (MS Word format. For other formats,\n   see: <a href=\"http://code.google.com/p/xmla4js/source/browse/#svn/trunk/doc/xmla1.1 specification\">http://code.google.com/p/xmla4js/source/browse/#svn/trunk/doc/xmla1.1 specification</a>).",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Object standard options"
                }
            ]
        },
        "Xmla.Rowset": {
            "name": "Xmla.Rowset",
            "shortname": "Xmla.Rowset",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xmla",
            "namespace": "",
            "file": "src/Xmla.js",
            "line": 4436,
            "description": "<p>\nThis class implements an XML/A Rowset object.\n</p>\n<p>\nYou do not need to instantiate objects of this class yourself.\nRather, the <code><a href=\"Xmla.html#class_Xmla\">Xmla</a></code> class will instantiate this class to convey the result of any of the various <code>discoverXXX()</code> methods\n(see <code><a href=\"Xmla.html#method_discover\">discover()</a></code>).\nIn addition, this class is also used to instantiate a Resultset for the\n<code><a name=\"Xmla.html#method_execute\">execute()</code> method in case the\n<code>Format</code> property is set to <code>Tabular</code>\n(see <code><a name=\"Xmla.html#property_OPTION_FORMAT\">OPTION_FORMAT</a></code> and <code><a name=\"Xmla.html#property_OPTION_FORMAT_TABULAR\">OPTION_FORMAT_TABULAR</a></code>).\nThe <code><a href=\"Xmla.html#method_request\">request()</a></code> method itself will also return an instance of this class in case the <code>method</code> is used to do a\n<code>Discover</code> request, or in case it is used to do a <code>Execute</code> request and the <code>Format</code> property is set to <code>Tabular</code>.\n</p>\n<p>\nAn instance of the <code>Xmla.Rowset</code> class is returned immediately as return value from the <code>disoverXXX()</code> or <code>execute()</code> method when doing a synchronous request.\nIn addition, the rowset is available in the eventdata passed to any registered listeners\n(see <code><a href=\"Xmla.html#method_addListener\">addListener()</a></code>).\nNote that for asynchronous requests, the only way to obtain the returned <code>Rowset</code> instance is through the listeners.\n</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "node",
                    "description": "The responseXML result returned by server in response to a <code>Discover</code> request.",
                    "type": "DOMDocument"
                },
                {
                    "name": "requestTtype",
                    "description": "The requestType identifying the particular schema rowset to construct. This facilitates implementing field getters for a few complex types.",
                    "type": "String"
                },
                {
                    "name": "xmla",
                    "description": "The Xmla instance that created this Rowset. This is mainly used to allow the Rowset to access the options passed to the Xmla constructor.",
                    "type": "Xmla"
                }
            ]
        },
        "Xmla.Dataset": {
            "name": "Xmla.Dataset",
            "shortname": "Xmla.Dataset",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xmla",
            "namespace": "",
            "file": "src/Xmla.js",
            "line": 5474,
            "description": "<p>\nThis class implements an XML/A multidimensional Dataset object.\n</p>\n<p>\nYou do not need to instantiate objects of this class yourself.\nRather, the <code><a href=\"Xmla.html#class_Xmla\">Xmla</a></code> class will instantiate this class\nto convey the result of the <code>executeMultiDimensional</code> method\n(see <code><a href=\"Xmla.html#method_executeMultiDimensional\">executeMultiDimensional()</a></code>),\nand possibly the <code>execute</code> method.\n(Note that the <code><a name=\"Xmla.html#method_execute\">execute()</code> instantiates either the\n<code><a href=\"Xmla.html#class_Xmla.Rowset\">Xmla.Rowset</a></code> or the <code><a href=\"Xmla.html#class_Xmla.Rowset\">Xmla.Dataset</a></code> class\ndepending on the value of the <code>Format</code> property in the options passed to the <code><a href=\"Xmla.html#method_execute\">execute()</a></code> method.)\n</p>\n<p>\nAn instance of the <code>Xmla.Dataset</code> class may be returned immediately as return value from these methods when doing a synchronous request.\nIn addition, the <code>Xmla.Dataset</code> object is available in the eventdata passed to any registered listeners\n(see <code><a href=\"Xmla.html#method_addListener\">addListener()</a></code>).\n</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "doc",
                    "description": "The responseXML result returned by server in response to a <code>Execute</code> request.",
                    "type": "DOMDocument"
                }
            ]
        },
        "Xmla.Dataset.Axis": {
            "name": "Xmla.Dataset.Axis",
            "shortname": "Xmla.Dataset.Axis",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xmla",
            "namespace": "",
            "file": "src/Xmla.js",
            "line": 5877,
            "description": "<p>\nThis class implements an Axis object.\n</p>\n<p>\nYou do not need to instantiate objects of this class yourself.\nRather, the <code><a href=\"Xmla.Dataset.html#class_Xmla.Dataset\">Xmla.Dataset</a></code> class creates instances of this class to represent the axes of an MDX query.\n(see <code><a href=\"Xmla.Dataset.html#method_getAxis\">getAxis()</a></code>.)",
            "is_constructor": 1
        },
        "Xmla.Dataset.Cellset": {
            "name": "Xmla.Dataset.Cellset",
            "shortname": "Xmla.Dataset.Cellset",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xmla",
            "namespace": "",
            "file": "src/Xmla.js",
            "line": 6358,
            "description": "<p>\nThis class implements a Cellset object.\n</p>\n<p>\nYou do not need to instantiate objects of this class yourself.\nRather, the <code><a href=\"Xmla.Dataset.html#class_Xmla.Dataset\">Xmla.Dataset</a></code> class creates instances of this class to represent the cells (the value of the measures) of an MDX query.\n(see <code><a href=\"Xmla.Dataset.html#method_getCellset\">getCellset()</a></code>.)",
            "is_constructor": 1
        },
        "Xmla.Exception": {
            "name": "Xmla.Exception",
            "shortname": "Xmla.Exception",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xmla",
            "namespace": "",
            "file": "src/Xmla.js",
            "line": 6705,
            "description": "<p>\nThis class is used to indicate an runtime errors occurring in any of the methods of the xmla4js classes.\n</p>\n<p>\nYou do not need to instantiate objects of this class yourself.\nRather, instances of this class are created and thrown at runtime whenever an error occurs.\nThe purpose is to provide a clean and clear way for applications that use xmla4js to recognize and handle Xmla4js specific runtime errors.\n</p>\n<p>\nTo handle Xmla4js errors, you can use a <code>try...catch</code> block like this:\n</p>\n<pre>\n&nbsp;try {\n&nbsp;    ...general xmla4js work...\n&nbsp;} catch (exception) {\n&nbsp;    if (exception instanceof Xmla.Exception) {\n&nbsp;        ...use exception.code, exception.message and exception.data to handle the exception.\n&nbsp;    } else {\n&nbsp;        ...handle other errors...\n&nbsp;    }\n&nbsp;}\n</pre>",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "src/Xmla.js",
            "line": 662,
            "description": "Can be used as value for the method option in the options object passed to the\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server.\nInstead of explicitly setting the method yourself, consider using the <code><a href=\"#method_request\">discover()</a></code> method.\nThe <code>discover()</code> method automatically sets the method option to <code>METHOD_DISCOVER</code>.",
            "itemtype": "property",
            "name": "METHOD_DISCOVER",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>Discover</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 674,
            "description": "Can be used as value for the method option property in the options objecct passed to the\n<code><a href=\"#method_request\">request()</code></a> method to invoke the XML/A Execute method on the server.\nInstead of explicitly setting the method yourself, consider using the <code><a href=\"#method_execute\">execute()</a></code> method.\nThe <code>execute()</code> method automatically sets the method option to <code>METHOD_EXECUTE</code>.",
            "itemtype": "property",
            "name": "METHOD_EXECUTE",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>Discover</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 691,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>DISCOVER_DATASOURCES</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this constant as requestType yourself, consider calling the <code><a href=\"#method_discoverDataSources\">discoverDataSources()</a></code> method.\nThe <code>discoverDataSources()</code> method passes <code>DISCOVER_DATASOURCES</code> automatically as requestType for Discover requests.",
            "itemtype": "property",
            "name": "DISCOVER_DATASOURCES",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>DISCOVER_DATASOURCES</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 705,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>DISCOVER_PROPERTIES</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the <code><a href=\"#method_discoverProperties\">discoverProperties()</a></code> method.\nThe <code>discoverProperties()</code> method passes <code>DISCOVER_PROPERTIES</code> automatically as requestType for Discover requests.",
            "itemtype": "property",
            "name": "DISCOVER_PROPERTIES",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>DISCOVER_PROPERTIES</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 719,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>DISCOVER_SCHEMA_ROWSETS</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the <code><a href=\"#method_discoverSchemaRowsets\">discoverSchemaRowsets()</a></code> method.\nThe <code>discoverProperties()</code> method passes <code>DISCOVER_PROPERTIES</code> automatically as requestType for Discover requests.",
            "itemtype": "property",
            "name": "DISCOVER_SCHEMA_ROWSETS",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>DISCOVER_SCHEMA_ROWSETS</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 733,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>DISCOVER_ENUMERATORS</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the <code><a href=\"#method_discoverEnumerators\">discoverEnumerators()</a></code> method.\nThe <code>discoverSchemaRowsets()</code> method issues a request to invoke the Discover method using <code>DISCOVER_SCHEMA_ROWSETS</code> as requestType.",
            "itemtype": "property",
            "name": "DISCOVER_ENUMERATORS",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>DISCOVER_ENUMERATORS</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 747,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>DISCOVER_KEYWORDS</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this requestType yourself, consider calling the <code><a href=\"#method_discoverLiterals\">discoverKeywords()</a></code> method.\nThe <code>discoverKeywords()</code> method issues a request to invoke the Discover method using DISCOVER_KEYWORDS as requestType.",
            "itemtype": "property",
            "name": "DISCOVER_KEYWORDS",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>DISCOVER_KEYWORDS</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 761,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>DISCOVER_LITERALS</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the <code><a href=\"#method_discoverLiterals\">discoverLiterals()</a></code> method.\nThe <code>discoverLiterals()</code> method issues a request to invoke the Discover method using DISCOVER_LITERALS as requestType.",
            "itemtype": "property",
            "name": "DISCOVER_LITERALS",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>DISCOVER_LITERALS</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 775,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>DBSCHEMA_CATALOGS</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the <code><a href=\"#method_discoverDBCatalogs\">discoverDBCatalogs()</a></code> method.\nThe <code>discoverDBCatalogs()</code> method issues a request to invoke the Discover method using <code>DBSCHEMA_CATALOGS</code> as requestType.",
            "itemtype": "property",
            "name": "DBSCHEMA_CATALOGS",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>DBSCHEMA_CATALOGS</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 789,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>DBSCHEMA_COLUMNS</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the <code><a href=\"#method_discoverDBColumns\">discoverDBColumns()</a></code> method.\nThe <code>discoverDBColumns()</code> method issues a request to invoke the Discover method using <code>DBSCHEMA_COLUMNS</code> as requestType.",
            "itemtype": "property",
            "name": "DBSCHEMA_COLUMNS",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>DBSCHEMA_COLUMNS</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 803,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>DBSCHEMA_PROVIDER_TYPES</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the <code><a href=\"#method_discoverDBProviderTypes\">discoverDBProviderTypes()</a></code> method.\nThe <code>discoverDBProviderTypes()</code> method issues a request to invoke the Discover method using <code>DBSCHEMA_PROVIDER_TYPES</code> as requestType.",
            "itemtype": "property",
            "name": "DBSCHEMA_PROVIDER_TYPES",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>DBSCHEMA_PROVIDER_TYPES</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 817,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>DBSCHEMA_SCHEMATA</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the <code><a href=\"#method_discoverDBSchemata\">discoverDBSchemata()</a></code> method.\nThe <code>discoverDBColumns()</code> method issues a request to invoke the Discover method using <code>DBSCHEMA_SCHEMATA</code> as requestType.",
            "itemtype": "property",
            "name": "DBSCHEMA_SCHEMATA",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>DBSCHEMA_SCHEMATA</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 831,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>DBSCHEMA_TABLES</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the <code><a href=\"#method_discoverDBTables\">discoverDBTables()</a></code> method.\nThe <code>discoverDBColumns()</code> method issues a request to invoke the Discover method using <code>DBSCHEMA_TABLES</code> as requestType.",
            "itemtype": "property",
            "name": "DBSCHEMA_TABLES",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>DBSCHEMA_TABLES</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 845,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>DBSCHEMA_TABLES_INFO</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the\n<code><a href=\"#method_discoverDBTablesInfo\">discoverDBTablesInfo()</a></code> method.\nThe <code>discoverDBTablesInfo()</code> method issues a request to invoke the Discover method using <code>DBSCHEMA_TABLES_INFO</code> as requestType.",
            "itemtype": "property",
            "name": "DBSCHEMA_TABLES_INFO",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>DBSCHEMA_TABLES_INFO</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 860,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>MDSCHEMA_ACTIONS</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the\n<code><a href=\"#method_discoverMDActions\">discoverMDActions()</a></code> method.\nThe <code>discoverMDActions()</code> method issues a request to invoke the Discover method using <code>MDSCHEMA_ACTIONS</code> as requestType.",
            "itemtype": "property",
            "name": "MDSCHEMA_ACTIONS",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>MDSCHEMA_ACTIONS</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 875,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the\n<code>MDSCHEMA_CUBES</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the\n<code><a href=\"#method_discoverMDCubes\">discoverMDCubes()</a></code> method.\nThe <code>discoverMDCubes()</code> method issues a request to invoke the Discover method using\n<code>MDSCHEMA_CUBES</code> as requestType.",
            "itemtype": "property",
            "name": "MDSCHEMA_CUBES",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>MDSCHEMA_CUBES</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 892,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the\n<code>MDSCHEMA_DIMENSIONS</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the\n<code><a href=\"#method_discoverMDDimensions\">discoverMDDimensions()</a></code> method.\nThe <code>discoverMDDimensions()</code> method issues a request to invoke the Discover method using\n<code>MDSCHEMA_DIMENSIONS</code> as requestType.",
            "itemtype": "property",
            "name": "MDSCHEMA_DIMENSIONS",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>MDSCHEMA_DIMENSIONS</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 909,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the\n<code>MDSCHEMA_FUNCTIONS</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the\n<code><a href=\"#method_discoverMDFunctions\">discoverMDFunctions()</a></code> method.\nThe <code>discoverMDFunctions()</code> method issues a request to invoke the Discover method using\n<code>MDSCHEMA_FUNCTIONS</code> as requestType.",
            "itemtype": "property",
            "name": "MDSCHEMA_FUNCTIONS",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>MDSCHEMA_FUNCTIONS</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 926,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the\n<code>MDSCHEMA_HIERARCHIES</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the\n<code><a href=\"#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code> method.\nThe <code>discoverMDHierarchies()</code> method issues a request to invoke the Discover method using\n<code>MDSCHEMA_HIERARCHIES</code> as requestType.",
            "itemtype": "property",
            "name": "MDSCHEMA_HIERARCHIES",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>MDSCHEMA_HIERARCHIES</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 943,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the\n<code>MDSCHEMA_LEVELS</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the\n<code><a href=\"#method_discoverMDLevels\">discoverMDLevels()</a></code> method.\nThe <code>discoverMDLevels()</code> method issues a request to invoke the Discover method using\n<code>MDSCHEMA_LEVELS</code> as requestType.",
            "itemtype": "property",
            "name": "MDSCHEMA_LEVELS",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>MDSCHEMA_LEVELS</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 960,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the\n<code>MDSCHEMA_MEASURES</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the\n<code><a href=\"#method_discoverMDMeasures\">discoverMDMeasures()</a></code> method.\nThe <code>discoverMDMeasures()</code> method issues a request to invoke the Discover method using\n<code>MDSCHEMA_MEASURES</code> as requestType.",
            "itemtype": "property",
            "name": "MDSCHEMA_MEASURES",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>MDSCHEMA_MEASURES</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 977,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the\n<code>MDSCHEMA_MEMBERS</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the\n<code><a href=\"#method_discoverMDMembers\">discoverMDMembers()</a></code> method.\nThe <code>discoverMDMembers()</code> method issues a request to invoke the Discover method using\n<code>MDSCHEMA_MEMBERS</code> as requestType.",
            "itemtype": "property",
            "name": "MDSCHEMA_MEMBERS",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>MDSCHEMA_MEMBERS</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 994,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the\n<code>MDSCHEMA_PROPERTIES</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the\n<code><a href=\"#method_discoverMDProperties\">discoverMDProperties()</a></code> method.\nThe <code>discoverMDProperties()</code> method issues a request to invoke the Discover method using\n<code>MDSCHEMA_PROPERTIES</code> as requestType.",
            "itemtype": "property",
            "name": "MDSCHEMA_PROPERTIES",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>MDSCHEMA_PROPERTIES</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1011,
            "description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to\n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the\n<code>MDSCHEMA_SETS</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the\n<code><a href=\"#method_discoverMDSets\">discoverMDSets()</a></code> method.\nThe <code>discoverMDSets()</code> method issues a request to invoke the Discover method using\n<code>MDSCHEMA_SETS</code> as requestType.",
            "itemtype": "property",
            "name": "MDSCHEMA_SETS",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>MDSCHEMA_SETS</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1028,
            "description": "Indicates the <code>request</code> event.\nThis constant can be used as en entry in the events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method.\nThe <code>request</code> event is the first event that is fired before submitting a request\n(see: <code><a href=\"#method_request\">request()</a></code>)\nto the server, and before firing the method-specific request events\n(see <code><a href=\"#property_EVENT_EXECUTE\">EVENT_EXECUTE</a></code>\nand <code><a href=\"#property_EVENT_DISCOVER\">EVENT_DISCOVER</a></code>).\nThe <code>request</code> event itself is not method-specific, and fires for <code>Execute</code> as well as <code>Discover</code> requests.\nThe <code>EVENT_REQUEST</code> event is <em>cancelable</em>:\nthe <code>handler</code> function specified in the listener object passed to <code>addListener</code> should return a boolen, indicating\nwhether the respective operation should be canceled.",
            "itemtype": "property",
            "name": "EVENT_REQUEST",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>request</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1048,
            "description": "Indicates the <code>success</code> event.\nThis constant can be used as en entry in the events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method.\nThe <code>success</code> event  is the last event that is fired after receiving and processing a normal response\n(that is, a response that does not contain an XML/A <code>SoapFault</code>),\nafter firing the method-specific success events\n(see <code><a href=\"#property_EVENT_EXECUTE_SUCCESS\">EVENT_EXECUTE_SUCCESS</a></code>\nand <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>).\nThe <code>success</code> event is not method-specific, and fires for <code>Execute</code> as well as <code>Discover</code> responses.\nThis is event is not cancelable.",
            "itemtype": "property",
            "name": "EVENT_SUCCESS",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>success</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1066,
            "description": "Indicates the <code>error</code> event.\nThis constant can be used as en entry in the events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method.\nThe <code>error</code> is fired when an error occurs while sending a request or receiving a response.\nThe <code>error</code> event is not method-specific, and fires for errors encountered during both <code>Execute</code> as well as <code>Discover</code> method invocations.\nThis is event is not cancelable.",
            "itemtype": "property",
            "name": "EVENT_ERROR",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>error</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1081,
            "description": "Indicates the <code>execute</code> event.\nThis constant can be used as en entry in the events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method.\nThe <code>execute</code> event is method-specific, and is fired before submitting an <code>Execute</code> request\n(see: <code><a href=\"#method_execute\">execute()</a></code>)\nto the server, but after firing the <code>request</code> event\n(see: <code><a href=\"#property_EVENT_REQUEST\">EVENT_REQUEST</a></code>).\nThe <code>EVENT_EXECUTE</code> event is <em>cancelable</em>:\nthe <code>handler</code> function specified in the listener object passed to <code>addListener</code> should return a boolen, indicating\nwhether the respective operation should be canceled.",
            "itemtype": "property",
            "name": "EVENT_EXECUTE",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>execute</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1099,
            "description": "Indicates the <code>executesuccess</code> event.\nThis constant can be used as en entry in the events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method.\nThe <code>executesuccess</code> event is method-specific and fired only after receiving and processing a normal response\n(that is, a response that does not contain a <code>SoapFault</code>)\nto an incovation of the XML/A <code>Execute</code> method\n(see: <code><a href=\"#method_execute\">execute()</a></code>).\nThis is event is not cancelable.",
            "itemtype": "property",
            "name": "EVENT_EXECUTE_SUCCESS",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>executesuccess</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1115,
            "description": "Indicates the <code>executeerror</code> event.\nThis constant can be used as en entry in the events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method.\nThe <code>executeerror</code> event is method-specific and fired when an error occurs while sending an <code>Execute</code> request, or receiving a response to an <code>Execute</code method.\n(see: <code><a href=\"#method_execute\">execute()</a></code>).\nThis is event is not cancelable.",
            "itemtype": "property",
            "name": "EVENT_EXECUTE_ERROR",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>executeerror</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1130,
            "description": "Indicates the <code>discover</code> event.\nThis constant can be used as en entry in the events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method.\nThe <code>discover</code> event is method-specific, and is fired before submitting a <code>Discover</code> request\n(see: <code><a href=\"#method_discover\">discover()</a></code>)\nto the server, but after firing the <code>request</code> event\n(see: <code><a href=\"#property_EVENT_DISCOVER\">EVENT_DISCOVER</a></code>).\nThe <code>EVENT_DISCOVER</code> event is <em>cancelable</em>:\nthe <code>handler</code> function specified in the listener object passed to <code>addListener</code> should return a boolen, indicating\nwhether the respective operation should be canceled.",
            "itemtype": "property",
            "name": "EVENT_DISCOVER",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>discover</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1148,
            "description": "Indicates the <code>discoversuccess</code> event.\nThis constant can be used as en entry in the events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method.\nThe <code>discoversuccess</code> event is method-specific and fired only after receiving and processing a normal response\n(that is, a response that does not contain a <code>SoapFault</code>)\nto an incovation of the XML/A <code>Discover</code> method\n(see: <code><a href=\"#method_discover\">discover()</a></code>).\nThis is event is not cancelable.",
            "itemtype": "property",
            "name": "EVENT_DISCOVER_SUCCESS",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>discoversuccess</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1164,
            "description": "Indicates the <code>discovererror</code> event.\nThis constant can be used as en entry in the events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method.\nThe <code>discovererror</code> is method-specific and fired when an error occurs while sending an <code>Discover</code> request,\nor receiving a response to an <code>Discover</code method.\n(see: <code><a href=\"#method_discover\">discover()</a></code>).\nThis is event is not cancelable.",
            "itemtype": "property",
            "name": "EVENT_DISCOVER_ERROR",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>discovererror</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1180,
            "description": "Unifies all general events, that is, all events that are not method-specific.\nThis constant can be used as events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method,\nor you can use array concatenation to combine it with other arrays of <code>EVENT_XXX</code> constants.\nThis constant is especially intended for asyncronous handling of Schema rowset data.",
            "itemtype": "property",
            "name": "EVENT_GENERAL",
            "static": 1,
            "final": 1,
            "type": "string[]",
            "default": "<code>[EVENT_REQUEST,EVENT_SUCCESS,EVENT_ERROR]</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1198,
            "description": "Unifies all events specific for the <code>Discover</code> method.\nThis constant can be used as events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method,\nor you can use array concatenation to combine it with other arrays of <code>EVENT_XXX</code> constants.",
            "itemtype": "property",
            "name": "EVENT_DISCOVER_ALL",
            "static": 1,
            "final": 1,
            "type": "string[]",
            "default": "<code>[EVENT_DISCOVER,EVENT_DISCOVER_SUCCESS,EVENT_DISCOVER_ERROR]</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1215,
            "description": "Unifies all events specific for the <code>Execute</code> method.\nThis constant can be used as events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method,\nor you can use array concatenation to combine it with other arrays of <code>EVENT_XXX</code> constants.",
            "itemtype": "property",
            "name": "EVENT_EXECUTE_ALL",
            "static": 1,
            "final": 1,
            "type": "string[]",
            "default": "<code>[EVENT_EXECUTE,EVENT_EXECUTE_SUCCESS,EVENT_EXECUTE_ERROR]</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1232,
            "description": "Unifies all method-specific and non method-specific events.\nThis constant can be used as events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method.",
            "itemtype": "property",
            "name": "EVENT_ALL",
            "static": 1,
            "final": 1,
            "type": "string[]",
            "default": "<code>[].concat(Xmla.EVENT_GENERAL, Xmla.EVENT_DISCOVER_ALL, Xmla.EVENT_EXECUTE_ALL)</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1248,
            "description": "Can be used as key in the <code>properties</code> member of the <code>options</code> object\npassed to the <code><a href=\"#method_request\">request()</a></code> method\nto specify the XML/A <code>DataSourceInfo</code> property.\nThe XML/A <code>DataSourceInfo</code>, together with the XML/A service URL are required to\nconnect to a particular OLAP datasource.\nValid values for the <code>DataSourceInfo</code> as well as the corresponding URL should be obtained\nby querying the <code>DataSourceInfo</code> and <code>URL</code> columns of the <code>DISCOVER_DATASOURCES</code>\nrowset respectively (see <code><a href=\"method_discoverDataSources\">discoverDataSources()</a></code>).",
            "itemtype": "property",
            "name": "PROP_DATASOURCEINFO",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>DataSourceInfo</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1265,
            "description": "Can be used as key in the <code>properties</code> member of the <code>options</code> object\npassed to the <code><a href=\"#method_request\">execute()</a></code> method\nto specify the XML/A <code>Catalog</code> property.\nThe XML/A <code>Catalog</code> spefifies where to look for cubes that are referenced in th MDX statment.\nValid values for the <code>Catalog</code> should be obtained\nby querying the <code>CATALOG_NAME</code> of the <code>DBSCHEMA_CATALOGS</code>\nrowset (see <code><a href=\"method_discoverCatalogs\">discoverCatalogs()</a></code>).",
            "itemtype": "property",
            "name": "PROP_Catalog",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>Catalog</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1283,
            "description": "Can be used as key in the <code>properties</code> member of the <code>options</code> object\npassed to the <code><a href=\"#method_execute\">execute()</a></code> method\nto specify the XML/A <code>Format</code> property.\nThis property controls the structure of the resultset.",
            "itemtype": "property",
            "name": "PROP_FORMAT",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>Format</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1296,
            "description": "Can be used as value for the\n<code><a href=\"#property_PROP_FORMAT>PROP_FORMAT</a></code> key of the\n<code>properties</code> member of the\n<code>options</code> object passed to the\n<code><a href=\"#method_execute\">execute()</a></code> method.\nWhen used, this specifies that the multidimensional resultset should be returned in a tabular format,\ncauseing the multidimensional resultset to be represented with an instance of the\n<code><a href=\"Xmla.Rowset#class_Xmla.Rowset\">Xmla.Rowset</a></code> class.",
            "itemtype": "property",
            "name": "PROP_FORMAT_TABULAR",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>Tabular</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1313,
            "description": "Can be used as value for the\n<code><a href=\"#property_PROP_FORMAT>PROP_FORMAT</a></code> key of the\n<code>properties</code> member of the\n<code>options</code> object passed to the\n<code><a href=\"#method_execute\">execute()</a></code> method.\nWhen used, this specifies that the multidimensional resultset should be returned in a multidimensional format.\nCurrently, Xmla4js does not provide a class to represent the resultset in this format.\nHowever, you can access the results as xml through the\n<code><a href=\"#property_responseText\">responseText</a></code> and\n<code><a href=\"#property_responseXML\">responseXML</a></code> properties.",
            "itemtype": "property",
            "name": "PROP_FORMAT_MULTIDIMENSIONAL",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>Multidimensional</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1333,
            "description": "Can be used as key in the <code>properties</code> member of the <code>options</code> object\npassed to the <code><a href=\"#method_execute\">execute()</a></code> method\nto specify the XML/A <code>AxisFormat</code> property.\nThe XML/A <code>AxisFormat</code> property specifies how the client wants to receive the multi-dimensional resultset of a MDX query.\nValid values for the <code>AxisFormat</code> property are available as the static final properties\n<code><a href=\"#property_PROP_AXISFORMAT_TUPLE\">PROP_AXISFORMAT_TUPLE</a></code>,\n<code><a href=\"#property_PROP_AXISFORMAT_CLUSTER\">PROP_AXISFORMAT_CLUSTER</a></code>,\n<code><a href=\"#property_PROP_AXISFORMAT_CUSTOM\">PROP_AXISFORMAT_CUSTOM</a></code>.",
            "itemtype": "property",
            "name": "PROP_AXISFORMAT",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>AxisFormat</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1350,
            "description": "Can be used as value for the <code>AxisFormat</code> XML/A property\n(see: <code><a href=\"#property_PROP_AXISFORMAT\">PROP_AXISFORMAT</a></code>)\nin invocations of the <code>Execute</code> method\n(see: <code><a href=\"#method_execute\">execute()</a></code>).",
            "itemtype": "property",
            "name": "PROP_AXISFORMAT_TUPLE",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>TupleFormat</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1363,
            "description": "Can be used as value for the <code>AxisFormat</code> XML/A property\n(see: <code><a href=\"#property_PROP_AXISFORMAT\">PROP_AXISFORMAT</a></code>)\nin invocations of the <code>Execute</code> method\n(see: <code><a href=\"#method_execute\">execute()</a></code>).",
            "itemtype": "property",
            "name": "PROP_AXISFORMAT_CLUSTER",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>ClusterFormat</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1376,
            "description": "Can be used as value for the <code>AxisFormat</code> XML/A property\n(see: <code><a href=\"#property_PROP_AXISFORMAT\">PROP_AXISFORMAT</a></code>)\nin invocations of the <code>Execute</code> method\n(see: <code><a href=\"#method_execute\">execute()</a></code>).",
            "itemtype": "property",
            "name": "PROP_AXISFORMAT_CUSTOM",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>CustomFormat</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1390,
            "description": "Can be used as key in the <code>properties</code> member of the <code>options</code> object\npassed to the <code><a href=\"#method_request\">request()</a></code> method\nto specify the XML/A <code>Content</code> property.\nThe XML/A <code>Content</code> property specifies whether to return data and/or XML Schema metadata by the <code>Discover</code> and <code>Execute</code> invocations.\nValid values for the <code>Content</code> property are available as the static final properties\n<code><a href=\"#property_PROP_CONTENT_DATA\">PROP_CONTENT_DATA</a></code>,\n<code><a href=\"#property_PROP_CONTENT_NONE\">PROP_CONTENT_NONE</a></code>,\n<code><a href=\"#property_PROP_CONTENT_SCHEMA\">PROP_CONTENT_SCHEMA</a></code>,\n<code><a href=\"#property_PROP_CONTENT_SCHEMADATA\">PROP_CONTENT_SCHEMADATA</a></code>.\n\nNote: This key is primarily intended for clients that use the low-level <code><a href=\"#method_request\">request()</a></code> method.\nYou should not set this property when calling the <code><a href=\"#method_request\">discover()</a></code> method,\nthe <code><a href=\"#method_execute\">execute()</a></code> method,\nor any of the <code>discoverXXX()</code> methods.",
            "itemtype": "property",
            "name": "PROP_CONTENT",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>Content</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1413,
            "description": "Can be used as value for the XML/A <code>Content</code> property\n(see: <code><a href=\"#property_PROP_CONTENT\">PROP_CONTENT</a></code>).\nThis value specifies that the response should contain only data, but no XML Schema metadata.\n\nAs the <code>Xmla</code> class relies on the XML Schema metadata to construct Rowset and Resultset instances,\nthis option is primarily useful if you know how to process the XML response directly.",
            "itemtype": "property",
            "name": "PROP_CONTENT_DATA",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>Data</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1428,
            "description": "Can be used as value for the XML/A <code>Content</code> property\n(see: <code><a href=\"#property_PROP_CONTENT\">PROP_CONTENT</a></code>).\nThis value specifies that the response should contain neither data nor XML Schema metadata.\nThis is useful to check the validity of the request.",
            "itemtype": "property",
            "name": "PROP_CONTENT_NONE",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>None</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1441,
            "description": "Can be used as value for the XML/A <code>Content</code> property\n(see: <code><a href=\"#property_PROP_CONTENT\">PROP_CONTENT</a></code>).\nThis value specifies that the response should only return XML Schema metadata, but no data.",
            "itemtype": "property",
            "name": "PROP_CONTENT_SCHEMA",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>Schema</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1453,
            "description": "Can be used as value for the XML/A <code>Content</code> property\n(see: <code><a href=\"#property_PROP_CONTENT\">PROP_CONTENT</a></code>).\nThis value specifies that the response should return both data as well as XML Schema metadata.",
            "itemtype": "property",
            "name": "PROP_CONTENT_SCHEMADATA",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>SchemaData</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1467,
            "description": "This object stores listeners.\nEach key is a listener type (see the static final <code>EVENT_XXX</code> constants),\neach value is an array of listener objects that are subscribed to that particular event.",
            "itemtype": "property",
            "name": "listeners",
            "access": "protected",
            "tagname": "",
            "type": "Object",
            "default": "<pre>\n{\n&nbsp;     \"request\": []\n&nbsp;,   \"succss\": []\n&nbsp;,   \"error\": []\n&nbsp;,   \"discover\": []\n&nbsp;,   \"discoversuccss\": []\n&nbsp;,   \"discovererror\": []\n&nbsp;,   \"execute\": []\n&nbsp;,   \"executesuccss\": []\n&nbsp;,   \"executeerror\": []\n}</pre>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1489,
            "description": "The soap message sent in the last request to the server.",
            "itemtype": "property",
            "name": "soapMessage",
            "type": "{string}",
            "default": "<code>null</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1497,
            "description": "This property is set to <code>null</code> right before sending an XML/A request.\nWhen a successfull response is received, it is processed and the response object is assigned to this property.\nThe response object is either a\n<code><a href=\"Rowset.html#class_Rowset\">Rowset</a></code> (after a successful invocation of XML/A <code>Discover</code> method, see: <code><a href=\"method_discover\">discover()</a></code>) or a\n<code><a href=\"Resultset.html#class_Resultset\">Resultset</a></code> (after a successful invocation of the XML/A <code>Execute</code> method, see: <code><a href=\"method_execute\">executte()</a></code>)\ninstance.\n\nIf you are interested in processing the raw response XML, see\n<code><a href=\"#property_responseXML\">responseXML</a></code> and\n<code><a href=\"#property_responseText\">responseText</a></code>.\n\nNote that it is not safe to read this property immediately after doing an asynchronous request.\nFor asynchronous requests, you can read this property by the time the <code>XXX_SUCCESS</code> event handlers are notified (until it is set to <code>null</code> again by a subsequent request).",
            "itemtype": "property",
            "name": "response",
            "type": "Xmla.Rowset|Xmla.Dataset",
            "default": "<code>null</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1517,
            "description": "This property is set to <code>null</code> right before sending an XML/A request.\nWhen a successfull response is received, the XML response is stored to this property as plain text.\n\nIf you are interested in processing a DOM document rather than the raw XML text, see the\n<code><a href=\"#property_responseXML\">responseXML</a></code> property.\n\nIf you are interested in traversing the dataset returned in the XML/A response, see the\n<code><a href=\"#property_response\">response</a></code> property.\n\nNote that it is not safe to read this property immediately after doing an asynchronous request.\nFor asynchronous requests, you can read this property by the time the <code>XXX_SUCCESS</code> event handlers are notified (until it is set to <code>null</code> again by a subsequent request).",
            "itemtype": "property",
            "name": "responseText",
            "type": "{string}",
            "default": "<code>null</code>",
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1535,
            "description": "This property is set to <code>null</code> right before sending an XML/A request.\nWhen a successfull response is received, the XML response is stored to this property as a DOM Document.\n\nIf you are interested in processing the raw XML text rather than a DOM document, see the\n<code><a href=\"#property_responseText\">responseText</a></code> property.\n\nIf you are interested in traversing the dataset returned in the XML/A response, see the\n<code><a href=\"#property_response\">response</a></code> property.\n\nNote that it is not safe to read this property immediately after doing an asynchronous request.\nFor asynchronous requests, you can read this property by the time the <code>XXX_SUCCESS</code> event handlers are notified (until it is set to <code>null</code> again by a subsequent request).",
            "deprecated": true,
            "itemtype": "property",
            "name": "responseXML",
            "type": "{DOMDocument}",
            "default": "<code>null</code>",
            "see": [
                "getRep"
            ],
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1555,
            "itemtype": "method",
            "name": "getResponseXML",
            "return": {
                "description": "",
                "type": "DOMDocument"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1563,
            "description": "This method can be used to set a number of default options for the Xmla instance.\nThis is especially useful if you don't want to pass each and every option to each method call all the time.\nWhere appropriate, information that is missing from the parameter objects passed to the methods of the Xmla object\n   may be augmented with the values set through this method.\nFor example, if you plan to do a series of requests pertaining to one particular datasource,\nyou can set the mandatory options like url, async, datasource and catalog just once:\n<pre>\n&nbsp;   xml.setOptions({\n&nbsp;       url: \"http://localhost:8080/pentaho/Xmla\",\n&nbsp;       async: true,\n&nbsp;       properties: {\n&nbsp;           DataSourceInfo: \"Pentaho Analysis Services\",\n&nbsp;           Catalog: \"Foodmart\"\n&nbsp;       }\n&nbsp;   });\n</pre>\nThen, a subsequent <code></code>",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "Object",
                    "description": ""
                }
            ],
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1591,
            "description": "This method can be used to register one or more listeners. On such listener can listen for one or more events.\n<p>For a single listener, you can pass a <code>listener</code> object literal with the following structure:</p><pre>{\n    events: ...event name or array of event names...,\n    handler: ...function or array of functions...,\n    scope: object\n}</pre>\n<p>\n    You can use <code>event</code> as an alias for <code>events</code>.\n    Likewise, you can use <code>handlers</code> as an alias for <code>handler</code>.\n</p>\n<p>\n    Alternatively, you can pass the element as separate arguments instead of as an object literal:\n    <code>addListener(name, func, scope)</code>\n    where name is a valid event name, func is the function that is to be called when the event occurs.\n    The last argument is optional and can be used to specify the scope that will be used as context for executing the function.\n</p>\n<p>\n    To register multiple listeners, pass an array of listener objects:\n    <code>addListener([listener1, ..., listenerN])</code>\n</p>\n<p>\n    Alternatively, pass multiple listener objects as separate arguments:\n    <code>addListener(listener1, ..., listenerN)</code>\n</p>\n<p>\n    Or, pass a single object literal with event names as keys and listener objects or functions as values:\n    <pre>addListener({\n        discover: function() {\n            ...handle discover event...\n        },\n        error: {\n            handler: function() {\n               ...handle error event...\n            },\n            scope: obj\n        },\n        scope: defaultscope\n    })</pre>\n    In this case, you can use scope as a key to specify the default scope for the handler functions.\n</p>\n<p>Below is a more detailed description of the listener object and its components:</p>\n<dl>\n    <dt><code>events</code></dt>\n    <dd><code>string</code>|<code>string[]</code> REQUIRED.\n    The event or events to listen to.\n    You can specify a single event by using one of the <code>EVENT_XXX</code> string constant values.\n    You can specify multiple events by using an array of <code>EVENT_XXX</code> string constant values.\n    You can also use one of the predefined <code>EVENT_XXX</code> array constant values,\n    or use array concatenation and compose a custom list of event names.\n    To listen to all events, either use <code><a href=\"#property_EVENT_ALL\">EVENT_ALL</a></code>,\n    or otherwise the <code>string</code> value <code>\"all\"</code>.\n    </dd>\n    <dt><code>event</code></dt>\n    <dd><code>string</code>|<code>string[]</code> Alias for <code>events</code></dd>\n    <dt><code>handler</code></dt>\n    <dd><code>function</code>|<code>function[]</code> REQUIRED.\n    This function will be called and notified whenever one of the specified events occurs.\n    The function has the following signature: <code>boolean handler(string eventName, object eventData, Xmla xmla)</code>\n    You can also pass in an array of functions if you want multiple functions to be called when the event occurs.\n    The function is called in scope of the <code>scope</code> property of the listener object.\n    If no <code>scope</code> is specified, a global function is assumed.\n    The <code>handler</code> function has the following arguments:\n        <dl>\n            <dt><code>eventName</code></dt>\n            <dd><code>string</code> The event for which notification is given.\n            This is useful to distinguish between events in case the same handler function is used for multiple events.\n            In this case, use the <code>EVENT_XXX</code> constants to check the <code>eventName</code>.</dd>\n            <dt><code>eventData</code></dt>\n            <dd><code>Object</code> An object that conveys event-specific data.</dd>\n            <dt><code>xmla</code></dt>\n            <dd><code><a href=\"class_Xmla\">Xmla</a></code> A reference to this <code>Xmla</code> instance that is the source of the event.\n                Listeners can obtain the response as well as the original SOAP message sent to the server through this instance.\n                This allows one listener to be shared across multiple <code>Xmla</code> instances without managing the context manually.\n            </dd>\n        </dl>\n    For events that are <em>cancelable</em>, the handler should return a <code>boolean</code>.\n    If the handler returns <code>false</code> the respective operation will be canceled.\n    Otherwise, the operation continues (but may be canceled by another handler).\n    Currently, the following events are cancelable:\n    <code><a href=\"#property_EVENT_DISCOVER\">EVENT_DISCOVER</a></code>,\n    <code><a href=\"#property_EVENT_EXECUTE\">EVENT_EXECUTE</a></code>, and\n    <code><a href=\"#property_EVENT_REQUEST\">EVENT_REQUEST</a></code>.\n    </dd>\n    <dt><code>handlers</code></dt>\n    <dd><code>function</code>|<code>function[]</code> Alias for <code>handler</code></dd>\n    <dt><code>scope</code></dt>\n    <dd><code>Object</code> OPTIONAL When specified, this object is used as the <code>this</code> object when calling the handler.\n        When not specified, the global <code>window</code> is used.\n    </dd>\n</dl>",
            "itemtype": "method",
            "name": "addListener",
            "params": [
                {
                    "name": "listener",
                    "description": "An object that defines the events and the notification function to be called, or an array of such objects.",
                    "type": "Object|Array"
                }
            ],
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 1805,
            "description": "Sends a request to the XML/A server.\nThis method is rather low-level and allows full control over the request\nby passing an options object. General properties of the options object are:\n<ul>\n    <li><code>method</code> {string} REQUIRED the XML/A method to invoke. This should be one of the following constants:\n        <dl>\n            <dt><code><a href=\"#property_METHOD_DISCOVER\">METHOD_DISCOVER</a></code></dt>\n            <dd>\n                <p>\n                This method is used to obtain metadata from the XML/A service or XML/A provider.\n                Metadata is returned in a tabular format called Schema Rowsets, which are represented by an instance of the\n                <code><a href=\"Xmla.Rowset.html#class_Xmla.Rowset\">Xmla.Rowset</a></code> class.\n                For these types of requests, you must pass the <code>requestType</code> option to specify which schema rowset you want to obtain.\n                In addition, you can specify a <code>restrictions</code> object that is used as filter criteria to restrict which rows will be returned in the rowset.\n                </p>\n                <p>\n                Instead of explicitly passing <code>METHOD_DISCOVER</code> as the <code>requestType</code>, you can also call the\n                <code><a href=\"#method_discover\">discover()</a></code> method (which requires you to explictly pass a <code>requestType</code> option).\n                Finally, you can also call one of the <code>discoverXXX()</code> methods in order to request a particular schema rowset.\n                </p>\n            </dd>\n            <dt><code><a href=\"#property_METHOD_EXECUTE\">METHOD_EXECUTE</a></code></dt>\n            <dd>\n                <p>\n                This method is used to send an MDX quey to the XML/A provider.\n                Query results are returned in a multidimentsional format which is represented by an instance of the\n                <code><a href=\"Xmla.Dataset.html#class_Xmla.Dataset\">Xmla.Dataset</a></code> class.\n                For these types of requests, you must pass the <code>statement</code> option to specify the MDX query.\n                </p>\n                <p>\n                Instead of explicitly passing <code>METHOD_EXECUTE</code> as the <code>requestType</code>, you can also call the\n                <code><a href=\"#method_execute\">execute()</a></code> method.\n                </p>\n            </dd>\n        </dl>\n    </li>\n    <li><code>url</code> {string} REQUIRED the URL of XML/A service, or of a XML/A datasource.\n        Typically, you first use the URL of a XML/A service (like <code>http://your.pentaho.server:8080/pentaho/Xmla?userid=joe&amp;password=password</code>)\n        and use that to retrieve the <code>DISCOVER_DATASOURCES</code> rowset.\n        Then, you can connect to a XML/A datasource using the value returned by the <code>URL</code> column of the <code>DISCOVER_DATASOURCES</code> rowset\n        (typically, you also have to set a <code>DataSourceInfo</code> property using the value found in the <code>DataSourceInfo</code> column of the <code>DISCOVER_DATASOURCES</code> rowset).\n    </li>\n    <li>\n        <code>properties</code> {Object} XML/A properties.\n        The appropriate types and values of XML/A properties are dependent upon the specific method and requestType.\n        The XML/A standard defines a set of pre-defined properties.\n        The <code>Xmla</code> class defines a static final property for each of these (see the <code>PROP_XXX</code> constants).\n        The list of all valid properties can be obtained from the <code>DISCOVER_PROPERTIES</code> schema rowset\n        (see <code><a href=\"#method_discoverProperties()\">discoverProperties()</a></code>).\n        Each javascript property of the <code>properties</code> object is mapped literally to a XML/A property.\n    </li>\n    <li><code>async</code> {boolean}\n        Determines how the request is performed:<ul>\n            <li><code>true</code>: The request is performed asynchronously: the call to <code>request()</code> will not block and return immediately.\n            In this case, the return value of the <code>request()</code> method is not defined,\n            and the response must be received by registering a listener.\n            (see <code><a href=\"#method_addListener\">addListener()</a></code>).\n\n            As an alternative to using listeners, you can also pass\n            <code>success</code>, <code>error</code> and <code>callback</code> callback functions.\n            Callbacks are described in more detail below.\n            </li>\n            <li><code>false</code>: The request is performed synchronously: the call to <code>request()</code> will block until it receives a response from the XML/A server or times out.\n            In this case, the <code>request()</code> method returns\n            a <code>Rowset</code> (for <code>Discover</code> requests) or\n            a <code>Resultset</code> (for <code>Execute</code> requests).\n            If you registered any listeners (see <code><a href=\"#method_addListener\">addListener()</a></code>),\n            then these will still be notified of any events (such as receiving the response).\n            </li>\n        </ul>\n    </li>\n    <li><code>success</code> (function)\n        A function that is to be called after the requests is executed and a successful response is receieved.\n        Any listeners appropriate for the request are called after this handler is executed.\n    </li>\n    <li><code>error</code> (function)\n        A function that is to be called after the requests is executed and an error was encountered.\n        Any listeners appropriate for the request are called after this handler is executed.\n    </li>\n    <li><code>callback</code> (function)\n        A function that is to be called after the requests is executed and the response is receieved,\n        and after calling any listeners that are appropriate for the request.\n        This function will be called both in case of success and of error.\n        If the options also contain a <code>success</code> and/or <code>error</code> handler, then\n        <code>callback</code> will be called after those more specific handlers are called.\n    </li>\n</ul>\nOther parts of the <code>options</code> object are method-specific.\n<ul>\n    <li>The following options are applicable in case the <code>method</code> is <code>METHOD_DISCOVER</code>:\n        <ul>\n            <li><code>requestType</code> - {string} Applies to the Discover method and indicates the kind of schema rowset to retrieve.\n                You can use one of the <code>DISCOVER_XXX</code>, <code>DBSCHEMA_XXX</code> or <code>MDSCHEMA_XXX</code> constants for this property.\n                You can also dymically discover which values for <code>requestType</code> are supported by the XML/A provider using the\n                <code>DISCOVER_SCHEMA_ROWSETS</code> rowset (see: <code><a href=\"method_discoverMDSchemaRowsets\">discoverMDSchemaRowsets()</a></code>).\n                See the <code><a href=\"#method_discover\">discover()</a></code> method for more information.\n            </li>\n            <li>\n                <code>restrictions</code> {Object} XML/A restrictions are used to filter the requested schema rowset.\n                For more information on restrictions, see the <code><a href=\"#method_discover\">discover()</a></code> method.\n            </li>\n        </ul>\n    </li>\n    <li>The following options are applicable in case the <code>method</code> is <code>METHOD_EXECUTE</code>:\n        <ul>\n            <li><code>statement</code> - {string} Applies to the Execute method and specifies the MDX query to send to the server.\n            </li>\n        </ul>\n    </li>\n</ul>\nInstead of calling this method directly, consider calling\n<code><a href=\"#method_discover\">discover()</a></code> (to obtain a schema rowset),\n<code><a href=\"#method_execute\">execute()</a></code> (to issue a MDX query),\nor one of the specialized <code>discoverXXX()</code> methods (to obtain a particular schema rowset).",
            "itemtype": "method",
            "name": "request",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A method. For an asynchronous request, the return value is not defined. For synchronous requests, <code>Discover</code> requests return an instance of a <code>Xmla.Rowset</code>, and <code>Execute</code> results return an instance of a <code>Xmla.Dataset</code>.",
                "type": "Xmla.Rowset|Xmla.Dataset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 2050,
            "description": "Sends an MDX query to a XML/A DataSource to invoke the XML/A <code>Execute</code> method and obtain the multi-dimensional resultset.\nOptions are passed using a generic <code>options</code> object.\nApplicable properties of the <code>options</code> object are:\n<ul>\n    <li><code>url</code> {string} REQUIRED the URL of a XML/A datasource.\n        This should be a value obtained from the <code>URL</code> column of the <code>DISCOVER_DATASOURCES</code> rowset\n        (see: <code><a href=\"method_discoverDataSources\">discoverDataSources()</a></code>).\n    </li>\n    <li><code>statement</code> - {string} The MDX query to send to the server.\n    </li>\n    <li>\n        <code>properties</code> {Object} XML/A properties.\n        The list of all valid properties can be obtained from the <code>DISCOVER_PROPERTIES</code> schema rowset\n        (see <code><a href=\"#method_discoverProperties()\">discoverProperties()</a></code>).\n        Typically, <code>execute()</code> requires these properties:<dl>\n            <dt><code>DataSourceInfo</code> property</dt>\n            <dd>Identifies a data source managed by the XML/A server.\n                To specify this property, you can use the static final constant\n                <code><a href=\"#property_PROP_DATASOURCEINFO\">PROP_DATASOURCEINFO</a></code>\n                as key in the <code>properties</code> object of the <code>options</code> object passed to the <code>execute()</code> method.\n                Valid values for this property should be obtained from the <code>DataSourceInfo</code> column\n                of the <code>DISCOVER_DATASOURCES</code> schema rowset (see: <code><a href=\"#method_discoverDataSources\">discoverDataSources()</a></code>).\n                Note that the values for the <code>DataSourceInfo</code> property and the <code>url</code> must both be taken from the same row of the <code>DISCOVER_DATASOURCES</code> schema rowset.\n            </dd>\n            <dt><code>Catalog</code> property</dt>\n            <dd>Identifies a catalog applicable for the datasource.\n                To specify this property, you can use the static final constant\n                <code><a href=\"#property_PROP_CATALOG\">PROP_CATALOG</a></code>\n                as key in the <code>properties</code> object of the <code>options</code> object passed to the <code>execute()</code> method.\n                Valid values for this property should be obtained from the <code>CATALOG_NAME</code> column\n                of the <code>DBSCHEMA_CATALOGS</code> schema rowset (see: <code><a href=\"#method_discoverDBCatalogs\">discoverDBCatalogs()</a></code>).\n            </dd>\n        </dl>\n    </li>\n    <li><code>async</code> {boolean}\n        Determines how the request is performed:<ul>\n            <li><code>true</code>: The request is performed asynchronously: the call to <code>request()</code> will not block and return immediately.\n            In this case, the return value of the <code>request()</code> method is not defined,\n            and the response must be received by registering a listener\n            (see <code><a href=\"#method_addListener\">addListener()</a></code>).\n            </li>\n            <li><code>false</code>: The request is performed synchronously: the call to <code>execute()</code> will block until it receives a response from the XML/A server or times out.\n            In this case, a <code>Resultset</code> is returned that represents the multi-dimensional data set.\n            If you registered any <code>REQUEST_XXX</code> and/or <code>EXECUTE_XXX</code> listeners (see <code><a href=\"#method_addListener\">addListener()</a></code>),\n            then these will still be notified.\n            </li>\n        </ul>\n    </li>\n</ul>",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A <code>Execute</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Execute</code> method. For an asynchronous request, the return value is not defined. For synchronous requests, an instance of a <code>Xmla.Dataset</code> that represents the multi-dimensional result set of the MDX query. If the <code>Format</code> property in the request was set to <code>Tabular</code>, then an instance of the\n<code><a href=\"Xmla.Rowset#class_Xmla.Rowset\">Rowset</a></code> class is returned to represent the <code>Resultset</code>.",
                "type": "Xmla.Dataset|Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 2119,
            "description": "Sends an MDX query to a XML/A DataSource to invoke the <code><a href=\"#method_execute\">execute()</a></code> method using <code><a href=\"#property_PROP_FORMAT_TABULAR\">PROP_FORMAT_TABULAR</a></code> as value for the <code><a href=\"#property_PROP_FORMAT_TABULAR\">PROP_FORMAT</a></code> property. This has the effect of obtaining the multi-dimensional resultset as a <code><a href=\"Xmla.Rowset#class_Xmla.Rowset\">Rowset</a></code>.",
            "itemtype": "method",
            "name": "executeTabular",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A <code>Execute</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Execute</code> method. For an asynchronous request, the return value is not defined. For synchronous requests, an instance of a <code>Xmla.Rowset</code> that represents the multi-dimensional result set of the MDX query.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 2130,
            "description": "Sends an MDX query to a XML/A DataSource to invoke the <code><a href=\"#method_execute</a></code> method using <code><a href=\"#property_PROP_FORMAT_MULTIDIMENSIONAL\">PROP_FORMAT_MULTIDIMENSIONAL</a></code> as value for the <code><a href=\"#property_PROP_FORMAT_TABULAR\">PROP_FORMAT</a></code> property. In this case, the result is available only as XML text or XML document in the <code><a href=\"#property_responseText\">responseText</a></code>\nand  <code><a href=\"#property_responseXML\">responseXML</a></code> properties.",
            "itemtype": "method",
            "name": "executeMultiDimensional",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A <code>Execute</code> request.",
                    "type": "Object"
                }
            ],
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 2141,
            "description": "Sends a request to invoke the XML/A <code>Discover</code> method and returns a schema rowset specified by the <code>requestType</code> option.\nOptions are passed using a generic <code>options</code> object.\nApplicable properties of the <code>options</code> object are:\n<ul>\n    <li><code>requestType</code> - {string} Indicates the kind of schema rowset to retrieve.\n        You can use one of the following predefined XML for Analysis Schema Rowset constants:\n        <ul>\n            <li><code><a href=\"#property_DISCOVER_DATASOURCES\">DISCOVER_DATASOURCES</a></code></li>\n            <li><code><a href=\"#property_DISCOVER_ENUMERATORS\">DISCOVER_ENUMERATORS</a></code></li>\n            <li><code><a href=\"#property_DISCOVER_KEYWORDS\">DISCOVER_KEYWORDS</a></code></li>\n            <li><code><a href=\"#property_DISCOVER_LITERALS\">DISCOVER_LITERALS</a></code></li>\n            <li><code><a href=\"#property_DISCOVER_PROPERTIES\">DISCOVER_PROPERTIES</a></code></li>\n            <li><code><a href=\"#property_DISCOVER_SCHEMA_ROWSETS\">DISCOVER_SCHEMA_ROWSETS</a></code></li>\n        </ul>\n        Or one of the applicable OLE DB Schema Rowset constants:\n        <ul>\n            <li><code><a href=\"#property_DBSCHEMA_CATALOGS\">DBSCHEMA_CATALOGS</a></code></li>\n            <li><code><a href=\"#property_DBSCHEMA_COLUMNS\">DBSCHEMA_COLUMNS</a></code></li>\n            <li><code><a href=\"#property_DBSCHEMA_PROVIDER_TYPES\">DBSCHEMA_PROVIDER_TYPES</a></code></li>\n            <li><code><a href=\"#property_DBSCHEMA_SCHEMATA\">DBSCHEMA_SCHEMATA</a></code></li>\n            <li><code><a href=\"#property_DBSCHEMA_TABLES\">DBSCHEMA_TABLES</a></code></li>\n            <li><code><a href=\"#property_DBSCHEMA_TABLES_INFO\">DBSCHEMA_TABLES_INFO</a></code></li>\n        </ul>\n        Or one of the applicable OLE DB for OLAP Schema Rowset constants:\n        <ul>\n            <li><code><a href=\"#property_MDSCHEMA_ACTIONS\">MDSCHEMA_ACTIONS</a></code></li>\n            <li><code><a href=\"#property_MDSCHEMA_CUBES\">MDSCHEMA_CUBES</a></code></li>\n            <li><code><a href=\"#property_MDSCHEMA_DIMENSIONS\">MDSCHEMA_DIMENSIONS</a></code></li>\n            <li><code><a href=\"#property_MDSCHEMA_FUNCTIONS\">MDSCHEMA_FUNCTIONS</a></code></li>\n            <li><code><a href=\"#property_MDSCHEMA_HIERARCHIES\">MDSCHEMA_HIERARCHIES</a></code></li>\n            <li><code><a href=\"#property_MDSCHEMA_MEASURES\">MDSCHEMA_MEASURES</a></code></li>\n            <li><code><a href=\"#property_MDSCHEMA_MEMBERS\">MDSCHEMA_MEMBERS</a></code></li>\n            <li><code><a href=\"#property_MDSCHEMA_PROPERTIES\">MDSCHEMA_PROPERTIES</a></code></li>\n            <li><code><a href=\"#property_MDSCHEMA_SETS\">MDSCHEMA_SETS</a></code></li>\n        </ul>\n        You can also dymically discover which values for <code>requestType</code> are supported by the XML/A provider.\n        To do that, refer to the <code>SchemaName</code> column of the <code>DISCOVER_SCHEMA_ROWSETS</code> rowset\n        (see: <code><a href=\"method_discoverMDSchemaRowsets\">discoverMDSchemaRowsets()</a></code>).\n    </li>\n    <li><code>url</code> {string} REQUIRED the url of the XML/A service or XML/A datasource.\n        If the value for the <code>requestType</code> option is one of the predefined XML/A <code><a href=\"\">DISCOVER_XXX</a></code> constants,\n        then this should be the url of the XML/A service.\n    </li>\n    <li>\n        <code>properties</code> {Object} XML/A properties.\n        The appropriate types and values of XML/A properties are dependent upon the value passed as <code>requestType</code>.\n        The XML/A standard defines a set of pre-defined properties.\n        The <code>Xmla</code> class defines a static final property for each of these (see the <code>PROP_XXX</code> constants).\n        The list of all valid properties can be obtained from the <code>DISCOVER_PROPERTIES</code> schema rowset\n        (see <code><a href=\"#method_discoverProperties()\">discoverProperties()</a></code>).\n        Each javascript property of the <code>properties</code> object is mapped literally to a XML/A property.\n    </li>\n    <li>\n        <code>restrictions</code> {Object} XML/A restrictions.\n        These are used to specify a filter that will be applied to the data in the schema rowset.\n        Each javascript property of the <code>restrictions</code> object is mapped to a column of the requested schema rowset.\n        The value for the restriction is sent with the request, and processed by the XML/A server to only return matching rows from the requested schema dataset.\n        The name, types and values of the restrictions are dependent upon which schema rowset is requested.\n        The available restrictions are specified by the <code>Restrictions</code> column of the <code>DISCOVER_SCHEMA_ROWSETS</code> schema rowset.\n        For a number of schema rowsets, the available restrictions are pre-defined.\n        These are documented together with each particular <code>discoverXXX()</code> method.\n    </li>\n    <li><code>async</code> {boolean}\n        Determines how the request is performed:<ul>\n            <li><code>true</code>: The request is performed asynchronously: the call to <code>request()</code> will not block and return immediately.\n            In this case, the return value of the <code>request()</code> method is not defined,\n            and the response must be received by registering a listener\n            (see <code><a href=\"#method_addListener\">addListener()</a></code>).\n            </li>\n            <li><code>false</code>: The request is performed synchronously: the call to <code>execute()</code> will block until it receives a response from the XML/A server or times out.\n            In this case, a <code>Resultset</code> is returned that represents the multi-dimensional data set.\n            If you registered any <code>REQUEST_XXX</code> and/or <code>EXECUTE_XXX</code> listeners (see <code><a href=\"#method_addListener\">addListener()</a></code>),\n            then these will still be notified.\n            </li>\n        </ul>\n    </li>\n</ul>\nInstead of calling this method directly, consider calling\nor one of the specialized <code>discoverXXX()</code> methods to obtain a particular schema rowset.",
            "itemtype": "method",
            "name": "discover",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A <code>Discover</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the requested schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 2232,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using <code><a href=\"#property_DISCOVER_DATASOURCES\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>DISCOVER_DATASOURCES</code> schema rowset.\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n    <tr>\n        <td>\n            DataSourceName\n        </td>\n        <td>\n            string\n        </td>\n        <td>\n            A name that identifies this data source.\n        </td>\n        <td>\n            Yes\n        </td>\n        <td>\n            No\n        </td>\n    </tr>\n    <tr>\n        <td>\n            DataSourceDescription\n        </td>\n        <td>\n            string\n        </td>\n        <td>\n            Human readable description of the datasource\n        </td>\n        <td>\n            No\n        </td>\n        <td>\n            Yes\n        </td>\n    </tr>\n    <tr>\n        <td>\n            URL\n        </td>\n        <td>\n            string\n        </td>\n        <td>\n            URL to use to submit requests to this provider.\n        </td>\n        <td>\n            Yes\n        </td>\n        <td>\n            Yes\n        </td>\n    </tr>\n    <tr>\n        <td>\n            DataSourceInfo\n        </td>\n        <td>\n            string\n        </td>\n        <td>\n            Connectstring\n        </td>\n        <td>\n            No\n        </td>\n        <td>\n            Yes\n        </td>\n    </tr>\n    <tr>\n        <td>\n            ProviderName\n        </td>\n        <td>\n            string\n        </td>\n        <td>\n            A name indicating the product providing the XML/A implementation\n        </td>\n        <td>\n            Yes\n        </td>\n        <td>\n            Yes\n        </td>\n    </tr>\n    <tr>\n        <td>\n            ProviderType\n        </td>\n        <td>\n            string[]\n        </td>\n        <td>\n            The kind of data sets supported by this provider.\n            The following values are defined by the XML/A specification:\n            <dl>\n                <dt>TDP</dt><dd>tabular data provider.</dd>\n                <dt>MDP</dt><dd>multidimensiona data provider.</dd>\n                <dt>DMP</dt><dd>data mining provider.</dd>\n            </dl>\n            Note: multiple values are possible.\n        </td>\n        <td>\n            Yes\n        </td>\n        <td>\n            No\n        </td>\n    </tr>\n    <tr>\n        <td>\n            AuthenticationMode\n        </td>\n        <td>\n            string\n        </td>\n        <td>\n            Type of security offered by the provider\n            The following values are defined by the XML/A specification:\n            <dl>\n                <dt>Unauthenticated</dt><dd>no user ID or password needs to be sent.</dd>\n                <dt>Authenticated</dt><dd>User ID and password must be included in the information required for the connection.</dd>\n                <dt>Integrated</dt><dd> the data source uses the underlying security to determine authorization</dd>\n            </dl>\n        </td>\n        <td>\n            Yes\n        </td>\n        <td>\n            No\n        </td>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverDataSources",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>DISCOVER_DATASOURCES</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>DISCOVER_DATASOURCES</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 2388,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using <code><a href=\"#property_DISCOVER_PROPERTIES\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>DISCOVER_PROPERTIES</code> schema rowset.\nThis rowset provides information on the properties that are supported by the XML/A provider.\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n    <tr>\n        <td>\n            PropertyName\n        </td>\n        <td>\n            string\n        </td>\n        <td>\n            The name of the property\n        </td>\n        <td>\n            Yes (array)\n        </td>\n        <td>\n            No\n        </td>\n    </tr>\n    <tr>\n        <td>\n            PropertyDescription\n        </td>\n        <td>\n            string\n        </td>\n        <td>\n            Human readable description of the property\n        </td>\n        <td>\n            No\n        </td>\n        <td>\n            Yes\n        </td>\n    </tr>\n    <tr>\n        <td>\n            PropertyType\n        </td>\n        <td>\n            string\n        </td>\n        <td>\n            The property's datatype (as an XML Schema data type)\n        </td>\n        <td>\n            No\n        </td>\n        <td>\n            Yes\n        </td>\n    </tr>\n    <tr>\n        <td>\n            PropertyAccessType\n        </td>\n        <td>\n            string\n        </td>\n        <td>\n            How the property may be accessed. Values defined by the XML/A spec are:\n            <ul>\n                <li>Read</li>\n                <li>Write</li>\n                <li>ReadWrite</li>\n            </ul>\n        </td>\n        <td>\n            No\n        </td>\n        <td>\n            No\n        </td>\n    </tr>\n    <tr>\n        <td>\n            IsRequired\n        </td>\n        <td>\n            boolean\n        </td>\n        <td>\n            <code>true</code> if the property is required, <code>false</code> if not.\n        </td>\n        <td>\n            No\n        </td>\n        <td>\n            Yes\n        </td>\n    </tr>\n    <tr>\n        <td>\n            Value\n        </td>\n        <td>\n            string\n        </td>\n        <td>\n            The property's current value.\n        </td>\n        <td>\n            No\n        </td>\n        <td>\n            Yes\n        </td>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverProperties",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>DISCOVER_DATASOURCES</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>DISCOVER_DATASOURCES</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 2520,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using <code><a href=\"#property_DISCOVER_SCHEMA_ROWSETS\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>DISCOVER_SCHEMA_ROWSETS</code> schema rowset.\nThis rowset lists all possible request types supported by this provider.\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n    <tr>\n        <td>SchemaName</td>\n        <td>string</td>\n        <td>The requestType. </td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>Restrictions</td>\n        <td>array</td>\n        <td>A list of columns that may be used to filter the schema rowset.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>Description</td>\n        <td>string</td>\n        <td>A human readable description of the schema rowset that is returned when using this requestType</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverSchemaRowsets",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>DISCOVER_SCHEMA_ROWSETS</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>DISCOVER_DATASOURCES</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 2566,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using <code><a href=\"#property_DISCOVER_ENUMERATORS\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>DISCOVER_ENUMERATORS</code> schema rowset.\nThis rowset lists the names, data types, and enumeration values of enumerators supported by the XMLA Provider for a specific data source.\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n    <tr>\n        <td>EnumName</td>\n        <td>string</td>\n        <td>Name of the enumerator. </td>\n        <td>Yes (array)</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>EnumDescription</td>\n        <td>string</td>\n        <td>A human readable description of the enumerator</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>EnumType</td>\n        <td>string</td>\n        <td>The XML Schema data type of this enumerator</td>\n        <td>No</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>ElementName</td>\n        <td>string</td>\n        <td>The name of the enumerator entry</td>\n        <td>No</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>ElementDescription</td>\n        <td>string</td>\n        <td>A human readable description of this enumerator entry</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>ElementValue</td>\n        <td>string</td>\n        <td>The value of this enumerator entry</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverEnumerators",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>DISCOVER_ENUMERATORS</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>DISCOVER_ENUMERATORS</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 2633,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using <code><a href=\"#property_DISCOVER_KEYWORDS\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>DISCOVER_KEYWORDS</code> schema rowset.\nThis rowset is a list of reserved words for this XML/A provider.\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n    <tr>\n        <td>Keyword</td>\n        <td>string</td>\n        <td>Name of the enumerator. </td>\n        <td>Yes (array)</td>\n        <td>No</td>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverKeywords",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>DISCOVER_KEYWORDS</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>DISCOVER_ENUMERATORS</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 2665,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using <code><a href=\"#property_DISCOVER_LITERALS\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>DISCOVER_LITERALS</code> schema rowset.\nThis rowset is a list of reserved words for this XML/A provider.\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n    <tr>\n        <td>LiteralName</td>\n        <td>string</td>\n        <td>Name of the literal. </td>\n        <td>Yes (array)</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>LiteralValue</td>\n        <td>string</td>\n        <td>The actual literal value. </td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LiteralInvalidChars</td>\n        <td>string</td>\n        <td>Characters that may not appear in the literal </td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LiteralInvalidStartingChars</td>\n        <td>string</td>\n        <td>Characters that may not appear as first character in the literal </td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LiteralMaxLength</td>\n        <td>int</td>\n        <td>maximum number of characters for this literal, or -1 in case there is no maximum, or the maximum is unknown</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverLiterals",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>DISCOVER_LITERALS</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>DISCOVER_LITERALS</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 2725,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using\n<code><a href=\"#property_DBSCHEMA_CATALOGS\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>DBSCHEMA_CATALOGS</code> schema rowset.\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n    <tr>\n        <td>CATALOG_NAME</td>\n        <td>string</td>\n        <td>Name of the catalog</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>DESCRIPTION</td>\n        <td>string</td>\n        <td>Human readable description</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>ROLES</td>\n        <td>string</td>\n        <td>A comma-separatd list of roles available to the current user.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>DATE_MODIFIED</td>\n        <td>Date</td>\n        <td>The date this catalog was modified</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverDBCatalogs",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>DBSCHEMA_CATALOGS</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>DBSCHEMA_CATALOGS</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 2777,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using\n<code><a href=\"#property_DBSCHEMA_COLUMNS\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>DBSCHEMA_COLUMNS</code> schema rowset.\nProvides column information for all columns meeting the provided restriction criteria.\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n     <tr>\n         <td>TABLE_CATALOG</td>\n         <td>string</td>\n         <td>The name of the Database.</td>\n         <td>Yes</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>TABLE_SCHEMA</td>\n         <td>string</td>\n         <td>Not supported.</td>\n         <td>Yes</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>TABLE_NAME</td>\n         <td>string</td>\n         <td>The name of the cube.</td>\n         <td>Yes</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>COLUMN_NAME</td>\n         <td>string</td>\n         <td>The name of the attribute hierarchy or measure.</td>\n         <td>Yes</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>COLUMN_GUID</td>\n         <td>string</td>\n         <td>Not supported.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>COLUMN_PROPID</td>\n         <td>int</td>\n         <td>Not supported.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>ORDINAL_POSITION</td>\n         <td>int</td>\n         <td>The position of the column, beginning with 1.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>COLUMN_HAS_DEFAULT</td>\n         <td>boolean</td>\n         <td>Not supported.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>COLUMN_DEFAULT</td>\n         <td>string</td>\n         <td>Not supported.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>COLUMN_FLAGS</td>\n         <td>int</td>\n         <td>A DBCOLUMNFLAGS bitmask indicating column properties. See 'DBCOLUMNFLAGS Enumerated Type' in IColumnsInfo::GetColumnInfo</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>IS_NULLABLE</td>\n         <td>boolean</td>\n         <td>Always returns false.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>DATA_TYPE</td>\n         <td>string</td>\n         <td>The data type of the column. Returns a string for dimension columns and a variant for measures.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>TYPE_GUID\n         <td>srring</td>\n         <td>Not supported.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>CHARACTER_MAXIMUM_LENGTH</td>\n         <td>int</td>\n         <td>The maximum possible length of a value within the column. This is retrieved from the DataSize property in the DataItem.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>CHARACTER_OCTET_LENGTH</td>\n         <td>int</td>\n         <td>The maximum possible length of a value within the column, in bytes, for character or binary columns. A value of zero (0) indicates the column has no maximum length. NULL will be returned for columns that do not return binary or character data types.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>NUMERIC_PRECISION</td>\n         <td>int</td>\n         <td>The maximum precision of the column for numeric data types other than DBTYPE_VARNUMERIC.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>NUMERIC_SCALE</td>\n         <td>int</td>\n         <td>The number of digits to the right of the decimal point for DBTYPE_DECIMAL, DBTYPE_NUMERIC, DBTYPE_VARNUMERIC. Otherwise, this is NULL.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>DATETIME_PRECISION</td>\n         <td>int</td>\n         <td>Not supported.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>CHARACTER_SET_CATALOG</td>\n         <td>string</td>\n         <td>Not supported.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>CHARACTER_SET_SCHEMA</td>\n         <td>string</td>\n         <td>Not supported.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>CHARACTER_SET_NAME</td>\n         <td>string</td>\n         <td>Not supported.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>COLLATION_CATALOG</td>\n         <td>string</td>\n         <td>Not supported.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>COLLATION_SCHEMA</td>\n         <td>string</td>\n         <td>Not supported.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>COLLATION_NAME</td>\n         <td>string</td>\n         <td>Not supported.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>DOMAIN_CATALOG</td>\n         <td>string</td>\n         <td>Not supported.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>DOMAIN_SCHEMA</td>\n         <td>string</td>\n         <td>Not supported.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>DOMAIN_NAME</td>\n         <td>string</td>\n         <td>Not supported.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>DESCRIPTION</td>\n         <td>string</td>\n         <td>Not supported.</td>\n         <td>No</td>\n         <td>No</td>\n     </tr>\n     <tr>\n         <td>COLUMN_OLAP_TYPE</td>\n         <td>string</td>\n         <td>The OLAP type of the object. MEASURE indicates the object is a measure. ATTRIBUTE indicates the object is a dimension attribute.</td>\n         <td>Yes</td>\n         <td>No</td>\n     </tr>\n</table>\n The rowset is sorted on TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME.",
            "itemtype": "method",
            "name": "discoverDBColumns",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>DBSCHEMA_COLUMNS</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>DBSCHEMA_COLUMNS</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 3006,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using\n<code><a href=\"#property_DBSCHEMA_PROVIDER_TYPES\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>DBSCHEMA_PROVIDER_TYPES</code> schema rowset.\n...todo...\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n     <tr>\n         <td>TYPE_NAME</td>\n         <td>string</td>\n         <td>The provider-specific data type name.</td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>DATA_TYPE</td>\n         <td>int</td>\n         <td>The indicator of the data type.</td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>COLUMN_SIZE</td>\n         <td>int</td>\n         <td> The length of a non-numeric column or parameter that refers to either the maximum or the length defined for this type by the provider. For character data, this is the maximum or defined length in characters. For DateTime data types, this is the length of the string representation (assuming the maximum allowed precision of the fractional seconds component). If the data type is numeric, this is the upper bound on the maximum precision of the data type. </td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>LITERAL_PREFIX</td>\n         <td>string</td>\n         <td>The character or characters used to prefix a literal of this type in a text command.</td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>LITERAL_SUFFIX</td>\n         <td>string</td>\n         <td>The character or characters used to suffix a literal of this type in a text command.</td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>CREATE_PARAMS\n         <td>string</td>\n         <td>The creation parameters specified by the consumer when creating a column of this data type. For example, the SQL data type, DECIMAL, needs a precision and a scale. In this case, the creation parameters might be the string \"precision,scale\". In a text command to create a DECIMAL column with a precision of 10 and a scale of 2, the value of the TYPE_NAME column might be DECIMAL() and the complete type specification would be DECIMAL(10,2). The creation parameters appear as a comma-separated list of values, in the order they are to be supplied and with no surrounding parentheses. If a creation parameter is length, maximum length, precision, scale, seed, or increment, use \"length\", \"max length\", \"precision\", \"scale\", \"seed\", and \"increment\", respectively. If the creation parameter is some other value, the provider determines what text is to be used to describe the creation parameter. If the data type requires creation parameters, \"()\" usually appears in the type name. This indicates the position at which to insert the creation parameters. If the type name does not include \"()\", the creation parameters are enclosed in parentheses and appended to the data type name. </td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>IS_NULLABLE</td>\n         <td>boolean</td>\n         <td>A Boolean that indicates whether the data type is nullable. VARIANT_TRUE indicates that the data type is nullable. VARIANT_FALSE indicates that the data type is not nullable. NULL indicates that it is not known whether the data type is nullable.</td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>CASE_SENSITIVE</td>\n         <td>boolean</td>\n         <td>A Boolean that indicates whether the data type is a characters type and case-sensitive. VARIANT_TRUE indicates that the data type is a character type and is case-sensitive. VARIANT_FALSE indicates that the data type is not a character type or is not case-sensitive.</td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>SEARCHABLE</td>\n         <td>int</td>\n         <td>An integer indicating how the data type can be used in searches if the provider supports ICommandText; otherwise, NULL. This column can have the following values: DB_UNSEARCHABLE indicates that the data type cannot be used in a WHERE clause. DB_LIKE_ONLY indicates that the data type can be used in a WHERE clause only with the LIKE predicate.DB_ALL_EXCEPT_LIKE indicates that the data type can be used in a WHERE clause with all comparison operators except LIKE. DB_SEARCHABLE indicates that the data type can be used in a WHERE clause with any comparison operator.</td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>UNSIGNED_ATTRIBUTE</td>\n         <td>boolean</td>\n         <td>A Boolean that indicates whether the data type is unsigned.   VARIANT_TRUE indicates that the data type is unsigned. VARIANT_FALSE indicates that the data type is signed.NULL indicates that this is not applicable to the data type.</td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>FIXED_PREC_SCALE</td>\n         <td>boolean</td>\n         <td>A Boolean that indicates whether the data type has a fixed precision and scale.  VARIANT_TRUE indicates that the data type has a fixed precision and scale. VARIANT_FALSE indicates that the data type does not have a fixed precision and scale.</td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>AUTO_UNIQUE_VALUE</td>\n         <td>boolean</td>\n         <td>A Boolean that indicates whether the data type is autoincrementing. VARIANT_TRUE indicates that values of this type can be autoincrementing. VARIANT_FALSE indicates that values of this type cannot be autoincrementing. If this value is VARIANT_TRUE, whether or not a column of this type is always autoincrementing depends on the provider's DBPROP_COL_AUTOINCREMENT column property. If the DBPROP_COL_AUTOINCREMENT property is read/write, whether or not a column of this type is autoincrementing depends on the setting of the DBPROP_COL_AUTOINCREMENT property. If DBPROP_COL_AUTOINCREMENT is a read-only property, either all or none of the columns of this type are autoincrementing. </td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>LOCAL_TYPE_NAME</td>\n         <td>string</td>\n         <td>The localized version of TYPE_NAME. NULL is returned if a localized name is not supported by the data provider.</td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>MINIMUM_SCALE</td>\n         <td>int</td>\n         <td>If the type indicator is DBTYPE_VARNUMERIC, DBTYPE_DECIMAL, or DBTYPE_NUMERIC, the minimum number of digits allowed to the right of the decimal point. Otherwise, NULL.</td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>MAXIMUM_SCALE</td>\n         <td>int</td>\n         <td>The maximum number of digits allowed to the right of the decimal point if the type indicator is DBTYPE_VARNUMERIC, DBTYPE_DECIMAL, or DBTYPE_NUMERIC; otherwise, NULL.</td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>GUID</td>\n         <td>string</td>\n         <td>(Intended for future use) The GUID of the type, if the type is described in a type library. Otherwise, NULL.</td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>TYPELIB\n         <td>string</td>\n         <td>(Intended for future use) The type library containing the description of the type, if the type is described in a type library. Otherwise, NULL.</td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>VERSION</td>\n         <td>string</td>\n         <td>(Intended for future use) The version of the type definition. Providers might want to version type definitions. Different providers might use different versioning schemes, such as a timestamp or number (integer or float). NULL if not supported.</td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>IS_LONG</td>\n         <td>boolean</td>\n         <td>A Boolean that indicates whether the data type is a binary large object (BLOB) and has very long data. VARIANT_TRUE indicates that the data type is a BLOB that contains very long data; the definition of very long data is provider-specific. VARIANT_FALSE indicates that the data type is a BLOB that does not contain very long data or is not a BLOB. This value determines the setting of the DBCOLUMNFLAGS_ISLONG flag returned by GetColumnInfo in IColumnsInfo and GetParameterInfo in ICommandWithParameters.</td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>BEST_MATCH</td>\n         <td>boolean</td>\n         <td>A Boolean that indicates whether the data type is a best match. VARIANT_TRUE indicates that the data type is the best match between all data types in the data store and the OLE DB data type indicated by the value in the DATA_TYPE column. VARIANT_FALSE indicates that the data type is not the best match. For each set of rows in which the value of the DATA_TYPE column is the same, the BEST_MATCH column is set to VARIANT_TRUE in only one row.</td>\n         <td>false</td>\n         <td>true</td>\n     </tr>\n     <tr>\n         <td>IS_FIXEDLENGTH</td>\n         <td>boolean</td>\n         <td>A Boolean that indicates whether the column is fixed in length. VARIANT_TRUE indicates that columns of this type created by the data definition language (DDL) will be of fixed length. VARIANT_FALSE indicates that columns of this type created by the DDL will be of variable length. If the field is NULL, it is not known whether the provider will map this field with a fixed-length or variable-length column.\n         <td>false</td>\n         <td>true</td>\n     </tr>\n </table>",
            "itemtype": "method",
            "name": "discoverDBProviderTypes",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>DBSCHEMA_PROVIDER_TYPES</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>DBSCHEMA_PROVIDER_TYPES</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 3178,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using\n<code><a href=\"#property_DBSCHEMA_SCHEMATA\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>DBSCHEMA_SCHEMATA</code> schema rowset.\n...todo...\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverDBSchemata",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>DBSCHEMA_SCHEMATA</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>DBSCHEMA_SCHEMATA</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 3203,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using\n<code><a href=\"#property_DBSCHEMA_TABLES\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>DBSCHEMA_TABLES</code> schema rowset.\n...todo...\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverDBTables",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>DBSCHEMA_TABLES</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>DBSCHEMA_TABLES</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 3228,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using\n<code><a href=\"#property_DBSCHEMA_TABLES_INFO\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>DBSCHEMA_TABLES_INFO</code> schema rowset.\n...todo...\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverDBTablesInfo",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>DBSCHEMA_TABLES_INFO</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>DBSCHEMA_TABLES_INFO</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 3257,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using\n<code><a href=\"#property_MDSCHEMA_ACTIONS\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>MDSCHEMA_ACTIONS</code> schema rowset.\n...todo...\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverMDActions",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>MDSCHEMA_ACTIONS</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>MDSCHEMA_ACTIONS</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 3282,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using\n<code><a href=\"#property_MDSCHEMA_CUBES\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>MDSCHEMA_CUBES</code> schema rowset.\n...todo...\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n    <tr>\n        <td>CATALOG_NAME</td>\n        <td>string</td>\n        <td>Name of the catalog</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>SCHEMA_NAME</td>\n        <td>string</td>\n        <td>Not supported</td>\n        <td>Yes</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>CUBE_NAME</td>\n        <td>string</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>CUBE_TYPE</td>\n        <td>string</td>\n        <td>Type of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>CUBE_GUID</td>\n        <td>string</td>\n        <td>Not supported</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>CREATED_ON</td>\n        <td>Date</td>\n        <td>Not supported</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>LAST_SCHEMA_UPDATE</td>\n        <td>Date</td>\n        <td>The time that the cube was last processed.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>SCHEMA_UPDATED_BY</td>\n        <td>string</td>\n        <td></td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>LAST_DATA_UPDATE</td>\n        <td>Date</td>\n        <td>The time that the cube was last processed.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>DATA_UPDATED_BY</td>\n        <td>string</td>\n        <td></td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>DESCRIPTION</td>\n        <td>string</td>\n        <td>A Human-readable description of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>IS_DRILLTHROUGH_ENABLED</td>\n        <td>boolean</td>\n        <td></td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>IS_LINKABLE</td>\n        <td>boolean</td>\n        <td></td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>IS_WRITE_ENABLED</td>\n        <td>boolean</td>\n        <td></td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>IS_SQL_ENABLED</td>\n        <td>boolean</td>\n        <td></td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>CUBE_CAPTION</td>\n        <td>string</td>\n        <td>Caption for this cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>BASE_CUBE_NAME</td>\n        <td>string</td>\n        <td>Name of the source cube (if this cube is a perspective cube).</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>ANNOTATIONS</td>\n        <td>string</td>\n        <td>Notes in xml format</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverMDCubes",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>MDSCHEMA_CUBES</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>MDSCHEMA_CUBES</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 3433,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using\n<code><a href=\"#property_MDSCHEMA_DIMENSIONS\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>MDSCHEMA_DIMENSIONS</code> schema rowset.\n...todo...\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n    <tr>\n        <td>CATALOG_NAME</td>\n        <td>string</td>\n        <td>Name of the catalog</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>SCHEMA_NAME</td>\n        <td>string</td>\n        <td>Not supported</td>\n        <td>Yes</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>CUBE_NAME</td>\n        <td>string</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>DIMENSION_NAME</td>\n        <td>string</td>\n        <td>Name of the dimension.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>DIMENSION_UNIQE_NAME</td>\n        <td>string</td>\n        <td>Unique name for this dimension.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>DIMENSION_GUID</td>\n        <td>string</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>DIMENSION_CAPTION</td>\n        <td>string</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>DIMENSION_ORDINAL</td>\n        <td>int</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>DIMENSION_TYPE</td>\n        <td>string</td>\n        <td>\n             <ul>\n                 <li>MD_DIMTYPE_UNKNOWN (0)</li>\n                 <li>MD_DIMTYPE_TIME (1)</li>\n                 <li>MD_DIMTYPE_MEASURE (2)</li>\n                 <li>MD_DIMTYPE_OTHER (3)</li>\n                 <li>MD_DIMTYPE_QUANTITATIVE (5)</li>\n                 <li>MD_DIMTYPE_ACCOUNTS (6)</li>\n                 <li>MD_DIMTYPE_CUSTOMERS (7)</li>\n                 <li>MD_DIMTYPE_PRODUCTS (8)</li>\n                 <li>MD_DIMTYPE_SCENARIO (9)</li>\n                 <li>MD_DIMTYPE_UTILIY (10)</li>\n                 <li>MD_DIMTYPE_CURRENCY (11)</li>\n                 <li>MD_DIMTYPE_RATES (12)</li>\n                 <li>MD_DIMTYPE_CHANNEL (13)</li>\n                 <li>MD_DIMTYPE_PROMOTION (14)</li>\n                 <li>MD_DIMTYPE_ORGANIZATION (15)</li>\n                 <li>MD_DIMTYPE_BILL_OF_MATERIALS (16)</li>\n                 <li>MD_DIMTYPE_GEOGRAPHY (17)</li>\n             </ul>\n         </td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>DIMENSION_CARDINALITY</td>\n        <td>int</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>DEFAULT_HIERARCHY</td>\n        <td>string</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>DESCRIPTION</td>\n        <td>string</td>\n        <td>A Human-readable description of the dimension.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>IS_VIRTUAL</td>\n        <td>boolean</td>\n        <td></td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>IS_READWRITE</td>\n        <td>boolean</td>\n        <td></td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>DIMENSION_UNIQUE_SETTINGS</td>\n        <td></td>\n        <td></td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>DIMENSION_MASTER_UNIQUE_NAME</td>\n        <td></td>\n        <td></td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>IS_VISIBLE</td>\n        <td>boolean</td>\n        <td></td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverMDDimensions",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>MDSCHEMA_DIMENSIONS</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>MDSCHEMA_DIMENSIONS</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 3597,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using\n<code><a href=\"#property_MDSCHEMA_FUNCTIONS\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>MDSCHEMA_FUNCTIONS</code> schema rowset.\n...todo...\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverMDFunctions",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>MDSCHEMA_FUNCTIONS</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>MDSCHEMA_FUNCTIONS</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 3622,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using\n<code><a href=\"#property_MDSCHEMA_HIERARCHIES\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>MDSCHEMA_HIERARCHIES</code> schema rowset.\n...todo...\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n    <tr>\n        <td>CATALOG_NAME</td>\n        <td>string</td>\n        <td>Name of the catalog</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>SCHEMA_NAME</td>\n        <td>string</td>\n        <td>Not supported</td>\n        <td>Yes</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>CUBE_NAME</td>\n        <td>string</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>DIMENSION_UNIQE_NAME</td>\n        <td>string</td>\n        <td>Unique name for this dimension.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>HIERARCHY_NAME</td>\n        <td>string</td>\n        <td>Name of the hierarchy.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>HIERARCHY_UNIQE_NAME</td>\n        <td>string</td>\n        <td>Unique name for this hierarchy.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>HIERARCHY_GUID</td>\n        <td>string</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>HIERARCHY_CAPTION</td>\n        <td>string</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>DIMENSION_TYPE</td>\n        <td>string</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>HIERARCHY_CARDINALITY</td>\n        <td>int</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>DEFAULT_MEMBER</td>\n        <td>string</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>ALL_MEMBER</td>\n        <td>string</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>DESCRIPTION</td>\n        <td>string</td>\n        <td>A Human-readable description of the dimension.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>STRUCTURE</td>\n        <td>string</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>IS_VIRTUAL</td>\n        <td>boolean</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>IS_READWRITE</td>\n        <td>boolean</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>DIMENSION_UNIQUE_SETTINGS</td>\n        <td>string</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>DIMENSION_MASTER_UNIQUE_NAME</td>\n        <td>string</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>DIMENSION_IS_VISIBLE</td>\n        <td>boolean</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>HIERARCHY_ORDINAL</td>\n        <td>int</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>DIMENSION_IS_SHARED</td>\n        <td>boolean</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>HIERARCHY_IS_VISIBLE</td>\n        <td>boolean</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>HIERARCHY_ORIGIN</td>\n        <td></td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>HIERARCHY_DISPLAY_FOLDER</td>\n        <td>string</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>INSTANCE_SELECTION</td>\n        <td>string</td>\n        <td></td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverMDHierarchies",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>MDSCHEMA_HIERARCHIES</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>MDSCHEMA_HIERARCHIES</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 3822,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using\n<code><a href=\"#property_MDSCHEMA_LEVELS\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>MDSCHEMA_LEVELS</code> schema rowset.\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n    <tr>\n        <td>CATALOG_NAME</td>\n        <td>string</td>\n        <td>The name of the catalog to which this level belongs. NULL if the provider does not support catalogs.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>SCHEMA_NAME</td>\n        <td>string</td>\n        <td>The name of the schema to which this level belongs. NULL if the provider does not support schemas.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>CUBE_NAME</td>\n        <td>string</td>\n        <td>The name of the cube to which this level belongs.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>DIMENSION_UNIQUE_NAME</td>\n        <td>string</td>\n        <td>The unique name of the dimension to which this level belongs. For providers that generate unique names by qualification, each component of this name is delimited.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>HIERARCHY_UNIQUE_NAME</td>\n        <td>string</td>\n        <td>The unique name of the hierarchy. If the level belongs to more than one hierarchy, there is one row for each hierarchy to which it belongs. For providers that generate unique names by qualification, each component of this name is delimited.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LEVEL_NAME</td>\n        <td>string</td>\n        <td>The name of the level.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LEVEL_UNIQUE_NAME</td>\n        <td>string</td>\n        <td>The properly escaped unique name of the level.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LEVEL_GUID</td>\n        <td>string</td>\n        <td>Not supported.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LEVEL_CAPTION</td>\n        <td>string</td>\n        <td>A label or caption associated with the hierarchy. Used primarily for display purposes. If a caption does not exist, LEVEL_NAME is returned.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LEVEL_NUMBER</td>\n        <td>int</td>\n        <td>The distance of the level from the root of the hierarchy. Root level is zero (0).</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LEVEL_CARDINALITY</td>\n        <td>int</td>\n        <td>The number of members in the level.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LEVEL_TYPE</td>\n        <td>int</td>\n        <td>Type of the level:\n             <ul>\n                <li>MDLEVEL_TYPE_GEO_CONTINENT (0x2001)</li>\n                <li>MDLEVEL_TYPE_GEO_REGION (0x2002)</li>\n                <li>MDLEVEL_TYPE_GEO_COUNTRY (0x2003)</li>\n                <li>MDLEVEL_TYPE_GEO_STATE_OR_PROVINCE (0x2004)</li>\n                <li>MDLEVEL_TYPE_GEO_COUNTY (0x2005)</li>\n                <li>MDLEVEL_TYPE_GEO_CITY (0x2006)</li>\n                <li>MDLEVEL_TYPE_GEO_POSTALCODE (0x2007)</li>\n                <li>MDLEVEL_TYPE_GEO_POINT (0x2008)</li>\n                <li>MDLEVEL_TYPE_ORG_UNIT (0x1011)</li>\n                <li>MDLEVEL_TYPE_BOM_RESOURCE (0x1012)</li>\n                <li>MDLEVEL_TYPE_QUANTITATIVE (0x1013)</li>\n                <li>MDLEVEL_TYPE_ACCOUNT (0x1014)</li>\n                <li>MDLEVEL_TYPE_CUSTOMER (0x1021)</li>\n                <li>MDLEVEL_TYPE_CUSTOMER_GROUP (0x1022)</li>\n                <li>MDLEVEL_TYPE_CUSTOMER_HOUSEHOLD (0x1023)</li>\n                <li>MDLEVEL_TYPE_PRODUCT (0x1031)</li>\n                <li>MDLEVEL_TYPE_PRODUCT_GROUP (0x1032)</li>\n                <li>MDLEVEL_TYPE_SCENARIO (0x1015)</li>\n                <li>MDLEVEL_TYPE_UTILITY (0x1016)</li>\n                <li>MDLEVEL_TYPE_PERSON (0x1041)</li>\n                <li>MDLEVEL_TYPE_COMPANY (0x1042)</li>\n                <li>MDLEVEL_TYPE_CURRENCY_SOURCE (0x1051)</li>\n                <li>MDLEVEL_TYPE_CURRENCY_DESTINATION (0x1052)</li>\n                <li>MDLEVEL_TYPE_CHANNEL (0x1061)</li>\n                <li>MDLEVEL_TYPE_REPRESENTATIVE (0x1062)</li>\n                <li>MDLEVEL_TYPE_PROMOTION (0x1071)</li>\n             </ul>\n        <td>No</td>\n        <td>Yes</td>\n    <tr>\n        <td>DESCRIPTION</td>\n        <td>string</td>\n        <td>A human-readable description of the level. NULL if no description exists.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>CUSTOM_ROLLUP_SETTINGS</td>\n        <td>int</td>\n        <td>A bitmap that specifies the custom rollup options: MDLEVELS_CUSTOM_ROLLUP_EXPRESSION (0x01) indicates an expression exists for this level. (Deprecated) MDLEVELS_CUSTOM_ROLLUP_COLUMN (0x02) indicates that there is a custom rollup column for this level. MDLEVELS_SKIPPED_LEVELS (0x04) indicates that there is a skipped level associated with members of this level.MDLEVELS_CUSTOM_MEMBER_PROPERTIES (0x08) indicates that members of the level have custom member properties. MDLEVELS_UNARY_OPERATOR (0x10) indicates that members on the level have unary operators.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LEVEL_UNIQUE_SETTINGS</td>\n        <td>int</td>\n        <td>A bitmap that specifies which columns contain unique values, if the level only has members with unique names or keys. The Msmd.h file defines the following bit value constants for this bitmap: MDDIMENSIONS_MEMBER_KEY_UNIQUE (1) MDDIMENSIONS_MEMBER_NAME_UNIQUE (2)The key is always unique in Microsoft SQL Server 2005 Analysis Services (SSAS). The name will be unique if the setting on the attribute is UniqueInDimension or UniqueInAttribute</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LEVEL_IS_VISIBLE</td>\n        <td>bool</td>\n        <td>A Boolean that indicates whether the level is visible. Always returns True. If the level is not visible, it will not be included in the schema rowset.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LEVEL_ORDERING_PROPERTY</td>\n        <td>string</td>\n        <td>The ID of the attribute that the level is sorted on.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LEVEL_DBTYPE</td>\n        <td>int</td>\n        <td>The DBTYPE enumeration of the member key column that is used for the level attribute. Null if concatenated keys are used as the member key column.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LEVEL_MASTER_UNIQUE_NAME</td>\n        <td>string</td>\n        <td>Always returns NULL.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LEVEL_NAME_SQL_COLUMN_NAME</td>\n        <td>string</td>\n        <td>The SQL representation of the level member names.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LEVEL_KEY_SQL_COLUMN_NAME</td>\n        <td>string</td>\n        <td>The SQL representation of the level member key values.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LEVEL_UNIQUE_NAME_SQL_COLUMN_NAME</td>\n        <td>string</td>\n        <td>The SQL representation of the member unique names.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LEVEL_ATTRIBUTE_HIERARCHY_NAME</td>\n        <td>string</td>\n         <td>The name of the attribute hierarchy providing the source of the level.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LEVEL_KEY_CARDINALITY</td>\n        <td>int</td>\n         <td>The number of columns in the level key.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>LEVEL_ORIGIN</td>\n        <td>int</td>\n         <td>A bit map that defines how the level was sourced:MD_ORIGIN_USER_DEFINED identifies levels in a user defined hierarchy.MD_ORIGIN_ATTRIBUTE identifies levels in an attribute hierarchy.MD_ORIGIN_KEY_ATTRIBUTE identifies levels in a key attribute hierarchy.MD_ORIGIN_INTERNAL identifies levels in attribute hierarchies that are not enabled.</td>\n        <td>No</td>\n        <td>Yes</td>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverMDLevels",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>MDSCHEMA_LEVELS</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>MDSCHEMA_LEVELS</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4048,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using\n<code><a href=\"#property_MDSCHEMA_MEASURES\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>MDSCHEMA_MEASURES</code> schema rowset.\n...todo...\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n    <tr>\n        <td>CATALOG_NAME</td>\n        <td>string</td>\n        <td>Name of the catalog</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>SCHEMA_NAME</td>\n        <td>string</td>\n        <td>Not supported</td>\n        <td>Yes</td>\n        <td>Yes</td>\n    </tr>\n    <tr>\n        <td>CUBE_NAME</td>\n        <td>string</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>MEASURE_NAME</td>\n        <td>string</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>MEASURE_UNIQUE_NAME</td>\n        <td>string</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>MEASURE_CAPTION</td>\n        <td>string</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>MEASURE_GUID</td>\n        <td>string</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>MEASURE_AGGREGATOR</td>\n        <td>string</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>DATA_TYPE</td>\n        <td>string</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>NUMERIC_PRECISION</td>\n        <td>int</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>NUMERIC_SCALE</td>\n        <td>int</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>DESCRIPTION</td>\n        <td>string</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>EXPRESSION</td>\n        <td>string</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>MEASURE_IS_VISIBLE</td>\n        <td>boolean</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>LEVELS_LIST</td>\n        <td>string</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>MEASURE_NAME_SQL_COLUMN_NAME</td>\n        <td>string</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>MEASURE_UNQUALIFIED_CAPTION</td>\n        <td>string</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>MEASUREGROUP_NAME</td>\n        <td>string</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>MEASURE_DISPLAY_FOLDER</td>\n        <td>string</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>DEFAULT_FORMAT_STRING</td>\n        <td>string</td>\n        <td>Name of the cube.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverMDMeasures",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>MDSCHEMA_MEASURES</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>MDSCHEMA_MEASURES</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4213,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using\n<code><a href=\"#property_MDSCHEMA_MEMBERS\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>MDSCHEMA_MEMBERS</code> schema rowset.\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n    <tr>\n        <td>CATALOG_NAME</td>\n        <td>string</td>\n        <td>The name of the catalog</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>SCHEMA_NAME</td>\n        <td>string</td>\n        <td>The name of the schema</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>CUBE_NAME</td>\n        <td>string</td>\n        <td>The name of the cube</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>DIMENSION_UNIQUE_NAME</td>\n        <td>string</td>\n        <td>The unique name of the dimension</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>HIERARCHY_UNIQUE_NAME</td>\n        <td>string</td>\n        <td>The unique name of the hierarchy</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>LEVEL_UNIQUE_NAME</td>\n        <td>string</td>\n        <td>The unique name of the level</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>LEVEL_NUMBERr</td>\n        <td>int</td>\n        <td>Distance of this level to the root</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>MEMBER_ORDINAL</td>\n        <td>int</td>\n        <td>Deprecated: always 0</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>MEMBER_NAME</td>\n        <td>string</td>\n        <td>The name of this member</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>MEMBER_UNIQUE_NAME</td>\n        <td>string</td>\n        <td>The unique name of this member</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>MEMBER_TYPE</td>\n        <td>int</td>\n        <td>An integer constant indicating the type of this member. Can take on one of the following values:\n            <ul>\n                <li><a href=\"Xmla.Rowset.html#property_MDMEMBER_TYPE_REGULAR\">MDMEMBER_TYPE_REGULAR</a></li>\n                <li><a href=\"Xmla.Rowset.html#property_MDMEMBER_TYPE_ALL\">MDMEMBER_TYPE_ALL</a></li>\n                <li><a href=\"Xmla.Rowset.html#property_MDMEMBER_TYPE_MEASURE\">MDMEMBER_TYPE_MEASURE</a></li>\n                <li><a href=\"Xmla.Rowset.html#property_MDMEMBER_TYPE_FORMULA\">MDMEMBER_TYPE_FORMULA</a></li>\n                <li><a href=\"Xmla.Rowset.html#property_MDMEMBER_TYPE_UNKNOWN\">MDMEMBER_TYPE_UNKNOWN</a></li>\n                <li><a href=\"Xmla.Rowset.html#property_MDMEMBER_TYPE_FORMULA\">MDMEMBER_TYPE_FORMULA</a></li>\n            </ul>\n        </td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>MEMBER_GUID</td>\n        <td>string</td>\n        <td>The guid of this member</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>MEMBER_CAPTION</td>\n        <td>string</td>\n        <td>A label or caption associated with the member. Used primarily for display purposes. If a caption does not exist, MEMBER_NAME is returned.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>CHILDREN_CARDINALITY</td>\n        <td>int</td>\n        <td>The number of childrend for this member</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>PARENT_LEVEL</td>\n        <td>int</td>\n        <td>The distance of the member's parent from the root level of the hierarchy. The root level is zero (0).</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>DESCRIPTION</td>\n        <td>string</td>\n        <td>This column always returns a NULL value. This column exists for backwards compatibility</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>EXPRESSION</td>\n        <td>string</td>\n        <td>The expression for calculations, if the member is of type MDMEMBER_TYPE_FORMULA.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n    <tr>\n        <td>MEMBER_KEY</td>\n        <td>string</td>\n        <td>The value of the member's key column. Returns NULL if the member has a composite key.</td>\n        <td>Yes</td>\n        <td>No</td>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverMDMembers",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>MDSCHEMA_MEMBERS</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>MDSCHEMA_MEMBERS</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4372,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using\n<code><a href=\"#property_MDSCHEMA_PROPERTIES\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>MDSCHEMA_PROPERTIES</code> schema rowset.\n...todo...\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverMDProperties",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>MDSCHEMA_PROPERTIES</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>MDSCHEMA_PROPERTIES</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4397,
            "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using\n<code><a href=\"#property_MDSCHEMA_SETS\"></a></code> as value for the <code>requestType</code>,\nand retrieves the <code>MDSCHEMA_SETS</code> schema rowset.\n...todo...\nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n    <tr>\n        <th>Column Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Restriction</th>\n        <th>Nullable</th>\n    </tr>\n</table>",
            "itemtype": "method",
            "name": "discoverMDSets",
            "params": [
                {
                    "name": "options",
                    "description": "An object whose properties convey the options for the XML/A a <code>MDSCHEMA_SETS</code> request.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The result of the invoking the XML/A <code>Discover</code> method. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>MDSCHEMA_SETS</code> schema rowset. For an asynchronous request, the return value is not defined: you should add a listener (see: <code><a href=\"#method_addListener\">addListener()</a></code>) and listen for the <code>success</code> (see: <code><a href=\"#property_EVENT_SUCCESS\">EVENT_SUCCESS</a></code>) or <code>discoversuccess</code> (see: <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>) events.",
                "type": "Xmla.Rowset"
            },
            "class": "Xmla",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4472,
            "description": "A possible value for the <code>DIMENSION_TYPE</code> column that appears in the\n<code>MDSCHEMA_DIMENSIONS</code> (See: <code><a href=\"Xmla.html#method_discoverMDDimensions\">discoverMDDimensions()</a></code>) and\n<code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowsets.",
            "itemtype": "property",
            "name": "MD_DIMTYPE_UNKNOWN",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>0</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4484,
            "description": "A possible value for the <code>DIMENSION_TYPE</code> column that appears in the\n<code>MDSCHEMA_DIMENSIONS</code> (See: <code><a href=\"Xmla.html#method_discoverMDDimensions\">discoverMDDimensions()</a></code>) and\n<code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowsets.",
            "itemtype": "property",
            "name": "MD_DIMTYPE_TIME",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>1</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4496,
            "description": "A possible value for the <code>DIMENSION_TYPE</code> column that appears in the\n<code>MDSCHEMA_DIMENSIONS</code> (See: <code><a href=\"Xmla.html#method_discoverMDDimensions\">discoverMDDimensions()</a></code>) and\n<code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowsets.",
            "itemtype": "property",
            "name": "MD_DIMTYPE_MEASURE",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>2</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4508,
            "description": "A possible value for the <code>DIMENSION_TYPE</code> column that appears in the\n<code>MDSCHEMA_DIMENSIONS</code> (See: <code><a href=\"Xmla.html#method_discoverMDDimensions\">discoverMDDimensions()</a></code>) and\n<code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowsets.",
            "itemtype": "property",
            "name": "MD_DIMTYPE_OTHER",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>3</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4520,
            "description": "A possible value for the <code>DIMENSION_TYPE</code> column that appears in the\n<code>MDSCHEMA_DIMENSIONS</code> (See: <code><a href=\"Xmla.html#method_discoverMDDimensions\">discoverMDDimensions()</a></code>) and\n<code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowsets.",
            "itemtype": "property",
            "name": "MD_DIMTYPE_QUANTITATIVE",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>5</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4532,
            "description": "A possible value for the <code>DIMENSION_TYPE</code> column that appears in the\n<code>MDSCHEMA_DIMENSIONS</code> (See: <code><a href=\"Xmla.html#method_discoverMDDimensions\">discoverMDDimensions()</a></code>) and\n<code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowsets.",
            "itemtype": "property",
            "name": "MD_DIMTYPE_ACCOUNTS",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>6</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4544,
            "description": "A possible value for the <code>DIMENSION_TYPE</code> column that appears in the\n<code>MDSCHEMA_DIMENSIONS</code> (See: <code><a href=\"Xmla.html#method_discoverMDDimensions\">discoverMDDimensions()</a></code>) and\n<code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowsets.",
            "itemtype": "property",
            "name": "MD_DIMTYPE_CUSTOMERS",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>7</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4556,
            "description": "A possible value for the <code>DIMENSION_TYPE</code> column that appears in the\n<code>MDSCHEMA_DIMENSIONS</code> (See: <code><a href=\"Xmla.html#method_discoverMDDimensions\">discoverMDDimensions()</a></code>) and\n<code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowsets.",
            "itemtype": "property",
            "name": "MD_DIMTYPE_PRODUCTS",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>8</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4568,
            "description": "A possible value for the <code>DIMENSION_TYPE</code> column that appears in the\n<code>MDSCHEMA_DIMENSIONS</code> (See: <code><a href=\"Xmla.html#method_discoverMDDimensions\">discoverMDDimensions()</a></code>) and\n<code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowsets.",
            "itemtype": "property",
            "name": "MD_DIMTYPE_SCENARIO",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>9</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4580,
            "description": "A possible value for the <code>DIMENSION_TYPE</code> column that appears in the\n<code>MDSCHEMA_DIMENSIONS</code> (See: <code><a href=\"Xmla.html#method_discoverMDDimensions\">discoverMDDimensions()</a></code>) and\n<code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowsets.",
            "itemtype": "property",
            "name": "MD_DIMTYPE_UTILIY",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>10</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4592,
            "description": "A possible value for the <code>DIMENSION_TYPE</code> column that appears in the\n<code>MDSCHEMA_DIMENSIONS</code> (See: <code><a href=\"Xmla.html#method_discoverMDDimensions\">discoverMDDimensions()</a></code>) and\n<code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowsets.",
            "itemtype": "property",
            "name": "MD_DIMTYPE_CURRENCY",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>11</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4604,
            "description": "A possible value for the <code>DIMENSION_TYPE</code> column that appears in the\n<code>MDSCHEMA_DIMENSIONS</code> (See: <code><a href=\"Xmla.html#method_discoverMDDimensions\">discoverMDDimensions()</a></code>) and\n<code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowsets.",
            "itemtype": "property",
            "name": "MD_DIMTYPE_RATES",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>12</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4616,
            "description": "A possible value for the <code>DIMENSION_TYPE</code> column that appears in the\n<code>MDSCHEMA_DIMENSIONS</code> (See: <code><a href=\"Xmla.html#method_discoverMDDimensions\">discoverMDDimensions()</a></code>) and\n<code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowsets.",
            "itemtype": "property",
            "name": "MD_DIMTYPE_CHANNEL",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>13</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4628,
            "description": "A possible value for the <code>DIMENSION_TYPE</code> column that appears in the\n<code>MDSCHEMA_DIMENSIONS</code> (See: <code><a href=\"Xmla.html#method_discoverMDDimensions\">discoverMDDimensions()</a></code>) and\n<code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowsets.",
            "itemtype": "property",
            "name": "MD_DIMTYPE_PROMOTION",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>14</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4640,
            "description": "A possible value for the <code>DIMENSION_TYPE</code> column that appears in the\n<code>MDSCHEMA_DIMENSIONS</code> (See: <code><a href=\"Xmla.html#method_discoverMDDimensions\">discoverMDDimensions()</a></code>) and\n<code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowsets.",
            "itemtype": "property",
            "name": "MD_DIMTYPE_ORGANIZATION",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>15</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4652,
            "description": "A possible value for the <code>DIMENSION_TYPE</code> column that appears in the\n<code>MDSCHEMA_DIMENSIONS</code> (See: <code><a href=\"Xmla.html#method_discoverMDDimensions\">discoverMDDimensions()</a></code>) and\n<code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowsets.",
            "itemtype": "property",
            "name": "MD_DIMTYPE_BILL_OF_MATERIALS",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>16</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4664,
            "description": "A possible value for the <code>DIMENSION_TYPE</code> column that appears in the\n<code>MDSCHEMA_DIMENSIONS</code> (See: <code><a href=\"Xmla.html#method_discoverMDDimensions\">discoverMDDimensions()</a></code>) and\n<code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowsets.",
            "itemtype": "property",
            "name": "MD_DIMTYPE_GEOGRAPHY",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>17</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4677,
            "description": "A possible value for the <code>STRUCTURE</code> column of the\n   <code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowset.",
            "itemtype": "property",
            "name": "MD_STRUCTURE_FULLYBALANCED",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>0</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4687,
            "description": "A possible value for the <code>STRUCTURE</code> column of the\n   <code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowset.",
            "itemtype": "property",
            "name": "MD_STRUCTURE_RAGGEDBALANCED",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>1</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4697,
            "description": "A possible value for the <code>STRUCTURE</code> column of the\n   <code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowset.",
            "itemtype": "property",
            "name": "MD_STRUCTURE_UNBALANCED",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>2</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4707,
            "description": "A possible value for the <code>STRUCTURE</code> column of the\n   <code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowset.",
            "itemtype": "property",
            "name": "MD_STRUCTURE_NETWORK",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>3</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4718,
            "description": "A  bitmap value for the <code>HIERARCHY_ORIGIN</code> column of the\n   <code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowset.\nIdentifies user defined hierarchies.",
            "itemtype": "property",
            "name": "MD_USER_DEFINED",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>1</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4729,
            "description": "A  bitmap value for the <code>HIERARCHY_ORIGIN</code> column of the\n   <code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowset.\nidentifies attribute hierarchies.",
            "itemtype": "property",
            "name": "MD_SYSTEM_ENABLED",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>2</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4740,
            "description": "A  bitmap value for the <code>HIERARCHY_ORIGIN</code> column of the\n   <code>MDSCHEMA_HIERARCHIES</code> (See: <code><a href=\"Xmla.html#method_discoverMDHierarchies\">discoverMDHierarchies()</a></code>)rowset.\nidentifies attributes with no attribute hierarchies.",
            "itemtype": "property",
            "name": "MD_SYSTEM_INTERNAL",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>4</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4752,
            "description": "A possible value for the <code>MEMBER_TYPE</code> column of the\n<code>MDSCHEMA_MEMBERS</code> rowset (see: <code><a href=\"Xmla.html#method_discoverMDMembers\">discoverMDMembers()</a></code>),\nindicating a regular member.",
            "itemtype": "property",
            "name": "MDMEMBER_TYPE_REGULAR",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>1</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4763,
            "description": "A possible value for the <code>MEMBER_TYPE</code> column of the\n<code>MDSCHEMA_MEMBERS</code> rowset (see: <code><a href=\"Xmla.html#method_discoverMDMembers\">discoverMDMembers()</a></code>),\nindicating an all member.",
            "itemtype": "property",
            "name": "MDMEMBER_TYPE_ALL",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>2</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4774,
            "description": "A possible value for the <code>MEMBER_TYPE</code> column of the\n<code>MDSCHEMA_MEMBERS</code> rowset (see: <code><a href=\"Xmla.html#method_discoverMDMembers\">discoverMDMembers()</a></code>),\nindicating a formula member.",
            "itemtype": "property",
            "name": "MDMEMBER_TYPE_FORMULA",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>3</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4785,
            "description": "A possible value for the <code>MEMBER_TYPE</code> column of the\n<code>MDSCHEMA_MEMBERS</code> rowset (see: <code><a href=\"Xmla.html#method_discoverMDMembers\">discoverMDMembers()</a></code>),\nindicating a measure member.",
            "itemtype": "property",
            "name": "MDMEMBER_TYPE_MEASURE",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>4</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 4796,
            "description": "A possible value for the <code>MEMBER_TYPE</code> column of the\n<code>MDSCHEMA_MEMBERS</code> rowset (see: <code><a href=\"Xmla.html#method_discoverMDMembers\">discoverMDMembers()</a></code>),\nindicating a member of unknown type",
            "itemtype": "property",
            "name": "MDMEMBER_TYPE_UNKNOWN",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>0</code>",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5051,
            "description": "Indicates the type of rowset. In most cases, this will be identical to the <code>requestType</code> value that was used in the\n<code>Discover</code> request",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "<code>int</code> One of the <code>DISCOVER_XXX</code>, <code>DBSCHEMA_XXX</code> or <code>MDSCHEMA_XXX</code> constants"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5061,
            "description": "Retrieve an array of <code>fieldDef</code> objects that describes the fields of the rows in this rowset.\nThe position of the <code>fieldDef</code> objects in the array corresponds to the column order of the rowset.\nFor a description of the <code>fieldDef</code> object, see the\n<code><a href=\"#method_fieldDef\">fieldDef()</a></code> method.",
            "itemtype": "method",
            "name": "getFields",
            "return": {
                "description": "An (ordered) array of field definition objects.",
                "type": "[fieldDef]"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5078,
            "description": "Retrieve an array of field names.\nThe position of the names in the array corresponds to the column order of the rowset.",
            "itemtype": "method",
            "name": "getFieldNames",
            "return": {
                "description": "An (ordered) array of field names.",
                "type": "[string]"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5090,
            "description": "Indicates wheter the rowset can still be traversed.\nYou can use this method together with the\n<code><a href=\"#method_nextRow\">nextRow()</a></code> method\nto drive a <code>while</code> loop to traverse all rows in the rowset, like so:\n <pre>\n&nbsp;while(rowset.hasMoreRows()){\n&nbsp;    ...process row...\n&nbsp;    rowsete.nextRow();\n&nbsp;}\n </pre>",
            "itemtype": "method",
            "name": "hasMoreRows",
            "return": {
                "description": "true in case there are more rows to traverse. false if all rows have been traversed.",
                "type": "Bool"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5107,
            "description": "Moves the internal row index to the next row.\nYou can use this method together with the\n<code><a href=\"#method_next\">hasMoreRows()</a></code> method\nto drive a <code>while</code> loop to traverse all rows in the rowset.",
            "itemtype": "method",
            "name": "nextRow",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5120,
            "description": "This method is deprecated and may be removed in the future.\nUse <code><a href=\"#method_nextRow\">nextRow()</a></code> instead.",
            "itemtype": "method",
            "name": "next",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5128,
            "description": "<p>Walks through all rows, and calls the callback function for each row.</p>\n\n<p>The callback function gets passed an object that represents the row.\nThe keys of the row object are the column names, and the values are the respective column values.</p>\n<p>The scope for calling the callback can be passed  as the second argument to this method.\nIf the scope is not defined (or if it is <code>null</code>), the Rowset's <code>this</code> pointer is used instead.</p>\n<p>You can pass additional data to the callback by passing in a third argument. This is then passed as is as second argument to the callback.</p>\n\n<p>The <code>eachRow</code> method will iterate untill the callback returns <code>false</code>, or until all rows have been traversed.\nIf the callback returns <code>false</code>, iteration is aborted and <code>eachRow</code> as a whole returns <code>false</code> too.\nIf iteration is not aborted, then eachRow returns <code>true</code>.</p>",
            "itemtype": "method",
            "name": "eachRow",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to be called for each row.",
                    "type": "Function()"
                },
                {
                    "name": "scope",
                    "description": "Optional. Scope in which the callback is called. Defaults to this, that is, the Rowset.",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Optional. Object that is passed as extra argument to the callback.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if all rows were itereated. If the callback returns false, iteration stops and false is returned.",
                "type": "Bool"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5161,
            "description": "Gets the value of the internal row index.\nNote that no check is performed to ensure this points to a valid row:\nyou should call this function only when it is safe to do so.\nThis can be determined by calling <code><a href=\"method_hasMoreRows\">hasMoreRows()</a></code>.",
            "itemtype": "method",
            "name": "curr",
            "return": {
                "description": "int"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5173,
            "description": "Returns the number of rows in the set.",
            "itemtype": "method",
            "name": "rowCount",
            "return": {
                "description": "int"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5182,
            "description": "Resets the internal row pointer so the resultset can be traversed again.",
            "itemtype": "method",
            "name": "reset",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5191,
            "description": "Retrieves a <code>fieldDef</code> object by name.\nA fieldDef describes a field (column). It has the following properties:\n<dl>\n    <dt>label</dt><dd>string. This is the human readable name for this field. You should use this name for display purposes and for building restrictions. This is also the name used for matching againstt the <code>name</code> argument passed to the <code>fieldDef()</code> method.</dd>\n    <dt>name</dt><dd>string. This is the (possibly escaped) name of the field as it appears in the XML document</dd>\n    <dt>index</dt><dd>int. The ordinal position of this field. Fields are numbered starting from 0.</dd>\n    <dt>type</dt><dd>string. The name of the XML data type for the values that appear in this column</dd>\n    <dt>minOccurs</dt><dd>string. The minimal number of occurrences of a value. \"0\" means the field is optional.</dd>\n    <dt>maxOccurs</dt><dd>string. If this is parseable as an integer, that integer specifies the number of times a value can appear in this column. \"unbounded\" means there is no declared limit.</dd>\n    <dt>getter</dt><dd>function. This function is used to extract a value from the XML document for this field.</dd>\n</dl>",
            "itemtype": "method",
            "name": "fieldDef",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the field to retrieve.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The <code>fieldDef</code> object that matches the argument.",
                "type": "FieldDef"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5217,
            "description": "Retrieves the index of a field by name.\nField indexes start at 0.",
            "itemtype": "method",
            "name": "fieldIndex",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the field for which you want to retrieve the index.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The ordinal position (starting at 0) of the field that matches the argument.",
                "type": "Int"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5227,
            "description": "Retrieves the name of a field by field Index.\nField indexes start at 0.",
            "itemtype": "method",
            "name": "fieldName",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the field for which you want to retrieve the index.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The ordinal position (starting at 0) of the field that matches the argument.",
                "type": "Int"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5244,
            "description": "Retrieves a value from the current row for the field having the name specified by the argument.",
            "itemtype": "method",
            "name": "fieldVal",
            "params": [
                {
                    "name": "name",
                    "description": "The name or the index of the field for which you want to retrieve the value.",
                    "type": "String | int"
                }
            ],
            "return": {
                "description": "From the current row, the value of the field that matches the argument.",
                "type": "Array|boolean|float|int|string"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5254,
            "description": "Returns the number of fields in this rowset.",
            "itemtype": "method",
            "name": "fieldCount",
            "return": {
                "description": "The number of fields in this rowset.",
                "type": "Int"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5262,
            "description": "Releases references to the DomDocument passed to the Rowset constructor.\nThis should facilitate automatic garbage collection by the browser.",
            "itemtype": "method",
            "name": "close",
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5272,
            "description": "Reads the current row and returns the result as a new array.\nThis method does not advance the internal row pointer, and does not check if there is a valid row.\nThis method exists mainly as a convience in case you want to use a custom way to extract data from the resultset using the\n<code><a href=\"#method_fetchCustom\">fetchCustom()</a></code> method.\nIf you just want to obtain the results as arrays, see\n<code><a href=\"#method_fetchAsArray\">fetchAsArray()</a></code>\nand\n<code><a href=\"#method_fetchAllAsArray\">fetchAllAsArray()</a></code>.",
            "itemtype": "method",
            "name": "readAsArray",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5295,
            "description": "Fetch all values from all fields from the current row, and return it in an array.\nThe position of the values in the array corresponds to the column order of the rowset.\nThe internal row pointer is also increased so the next call will read the next row.\nThe method returns false when there are no more rows to traverse.\nYou can use this method to drive a loop to travere all rows in the Rowset:\n<pre>\nwhile (rowArray = rowset.fetchAsArray()){\n&nbsp;   ...process array...\n}\n</pre>",
            "itemtype": "method",
            "name": "fetchAsArray",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5317,
            "description": "Reads the current row and returns the result as a new object.\nThis method does not advance the internal row pointer, and does not check if there is a valid row.\nThis method exists mainly as a convience in case you want to use a custom way to extract data from the resultset using the\n<code><a href=\"#method_fetchCustom\">fetchCustom()</a></code> method.\nIf you just want to obtain the results as objects, see\n<code><a href=\"#method_fetchAsObject\">fetchAsObject()</a></code>\nand\n<code><a href=\"#method_fetchAllAsObject\">fetchAllAsObject()</a></code>.",
            "itemtype": "method",
            "name": "readAsObject",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5340,
            "description": "Fetch all values from all fields from the current row, and return it in an Object literal.\nThe property names of the returned object correspond to the fieldName (actually the fieldLabel), and the field value is assigned to its respective property.\nThe internal row pointer is also increased so the next call will read the next row.\nThe method returns false when there are no more rows to traverse.\nYou can use this method to drive a loop to travere all rows in the Rowset:\n<pre>\nwhile (rowObject = rowset.fetchAsObject()){\n&nbsp;   ...process object...\n}\n</pre>",
            "itemtype": "method",
            "name": "fetchAsObject",
            "return": {
                "description": "",
                "type": "Object|boolean"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5362,
            "description": "Fetch the values using a custom callback function.\nIf there are rows to fetch, the custom function is called in scope of the rowset, so you can use <code>this</code> inside the custom function to refer to the rowset object.\nThen, the internal row pointer is increased so the next call will read the next row.\nThe method returns whatever object or value is returned by the custom function, or false when there are no more rows to traverse.",
            "itemtype": "method",
            "name": "fetchCustom",
            "params": [
                {
                    "name": "func",
                    "description": "a custom function to extract and return the data from the current row of the xml result.",
                    "type": "Function"
                },
                {
                    "name": "args",
                    "description": "an object that will be passed to the function. Useful to hold any data required in addition to the rowset itself (which can be referred to as this inside the function).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Mixed|boolean"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5382,
            "description": "Fetch all values from all fields from all rows, and return it as an array of arrays.\nSee <code><a href=\"#method_fetchAsArray\">fetchAsArray()</a></code>.",
            "itemtype": "method",
            "name": "fetchAllAsArray",
            "params": [
                {
                    "name": "rows",
                    "description": "OPTIONAL. An array to append the rows to. If not specified, a new array is created",
                    "type": "Array[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5395,
            "description": "Fetch all values from all fields from all rows, and return it as an array of objects.\nSee <code><a href=\"#method_fetchAsObject\">fetchAsObject()</a></code>.",
            "itemtype": "method",
            "name": "fetchAllAsObject",
            "params": [
                {
                    "name": "rows",
                    "description": "OPTIONAL. An array to append the rows to. If not specified, a new array is created",
                    "type": "Array[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5408,
            "description": "Fetch all rows using a custom function, and return the return values as an array.\nSee <code><a href=\"#method_fetchCustom\">fetchCustom()</a></code>.",
            "itemtype": "method",
            "name": "fetchAllCustom",
            "params": [
                {
                    "name": "rows",
                    "description": "OPTIONAL. An array to append the rows to. If not specified, a new array is created",
                    "type": "Array[]"
                },
                {
                    "name": "func",
                    "description": "a callback function to extract the fields.",
                    "type": "Function"
                },
                {
                    "name": "args",
                    "description": "an object to pass data to the callback.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5423,
            "description": "Fetch all row as an object, store it in nested objects according to values in the column identified by the key argument.\nThis method should typically not be called directly, rather it is a helper method for <code><a href=\"#method_mapAllAsObject\">mapAllAsObject()</a></code>.",
            "itemtype": "method",
            "name": "mapAsObject",
            "params": [
                {
                    "name": "map",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "row",
                    "description": ""
                }
            ],
            "return": {
                "description": "a tree using column values as branch names, and storing a row or an array of rows at the leaves.",
                "type": "Object"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5451,
            "description": "Fetch all rows as an object, store them as proprties in an object (which acts as map).",
            "itemtype": "method",
            "name": "mapAllAsObject",
            "key": "{string|array} OPTIONAL. A column name or an array of column names that will be used to generate property names for the map. If not specified, the default key is used. If there is no default key, all column names will be used.",
            "params": [
                {
                    "name": "map",
                    "description": "OPTIONAL. The object that is used as map. Rows are added as properties to this map. If not specified, a new object is created",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Xmla.Rowset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5503,
            "description": "Can be used as argument for <code><a href=\"#method_getAxis\">getAxis()</a></code> to get the first axis (the column axis).\nAlternatively you can simply call <code><a href=\"#method_getColumnAxis\">getColumnAxis()</a></code>",
            "itemtype": "property",
            "name": "AXIS_COLUMNS",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>0</code>",
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5513,
            "description": "Can be used as argument for <code><a href=\"#method_getAxis\">getAxis()</a></code> to get the second axis (the row axis).\nAlternatively you can simply call <code><a href=\"#method_getRowAxis\">getRowAxis()</a></code>",
            "itemtype": "property",
            "name": "AXIS_ROWS",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>1</code>",
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5523,
            "description": "Can be used as argument for <code><a href=\"#method_getAxis\">getAxis()</a></code> to get the third axis (the page axis).\nAlternatively you can simply call <code><a href=\"#method_getPageAxis\">getPageAxis()</a></code>",
            "itemtype": "property",
            "name": "AXIS_PAGES",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>2</code>",
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5533,
            "description": "Can be used as argument for <code><a href=\"#method_getAxis\">getAxis()</a></code> to get the fourth axis (the section axis).\nAlternatively you can simply call <code><a href=\"#method_getSectionAxis\">getSectionAxis()</a></code>",
            "itemtype": "property",
            "name": "AXIS_SECTIONS",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>3</code>",
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5543,
            "description": "Can be used as argument for <code><a href=\"#method_getAxis\">getAxis()</a></code> to get the fifth axis (the chapters axis).\nAlternatively you can simply call <code><a href=\"#method_getChapterAxis\">getChapterAxis()</a></code>",
            "itemtype": "property",
            "name": "AXIS_CHAPTERS",
            "static": 1,
            "final": 1,
            "type": "int",
            "default": "<code>4</code>",
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5553,
            "description": "Can be used as argument for <code><a href=\"#method_getAxis\">getAxis()</a></code> to get the slicer axis\n(the axis that appears in the <code>WHERE</code> clause of an MDX-<code>SELECT</code> statement).\nAlternatively you can simply call <code><a href=\"#method_getSlicerAxis\">getSlicerAxis()</a></code>",
            "itemtype": "property",
            "name": "AXIS_SLICER",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>SlicerAxis</code>",
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5637,
            "description": "Get the number of proper axes in this Dataset. This is the number of axes that appears in the <code>SELECT</code> list, and excludes the slicer axis.",
            "itemtype": "method",
            "name": "axisCount",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5657,
            "description": "Get the axis specified by the argument index or name.\nIf the axis does not exist, an <code>INVALID_AXIS</code> exception is thrown.\nTo prevent an exception from being thrown, you should call the <code><a href=\"#method_hasAxis\">hasAxis()</a></code> method to determine if the axis exists.\nAlternatively, you can call <code><a href=\"#method_axisCount\">axisCount()</a></code>, and use an integer argument between zero (inclusive) and axis count (exclusive).",
            "itemtype": "method",
            "name": "getAxis",
            "params": [
                {
                    "name": "nameOrIndex",
                    "description": "For int arguments, a value of 0 up to the number of axes. You can also use one of the <code>AXIS_xxx</code> constants. For string arguments, this method will match the name of the axis as it is returned in the XML/A response. These names are of the form <code>AxisN</code> where N is an ordinal that identifies the axis.",
                    "type": "String | int"
                }
            ],
            "return": {
                "description": "The <code><a href=\"Xmla.Dataset.Axis.html#class_Axis\">Xmla.Dataset.Axis</a></code> object that corresponds to the argument.",
                "type": "Xmla.Dataset.Axis"
            },
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5677,
            "description": "Determine if the axis specified by the argument exists.",
            "itemtype": "method",
            "name": "hasAxis",
            "params": [
                {
                    "name": "nameOrIndex",
                    "description": "For int arguments, a value of 0 up to the number of axes. You can also use one of the <code>AXIS_xxx</code> constants. For string arguments, this method will match the name of the axis as it is returned in the XML/A response. These names are of the form <code>AxisN</code> where N is an ordinal that identifies the axis.",
                    "type": "String | int"
                }
            ],
            "return": {
                "description": "<code>true</code> if the specified axis exists, <code>false</code> if it doesn't exist.",
                "type": "Boolean"
            },
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5687,
            "description": "Get the Column axis. This is the first axis, and has ordinal 0. If the column axis doesn't exist, an <code>INVALID_AXIS</code> exception is thrown.\nTo prevent an exception from being thrown, you should call the <code><a href=\"#method_hasColumnAxis\">hasColumnAxis()</a></code> method to determine if the axis exists.",
            "itemtype": "method",
            "name": "getColumnAxis",
            "return": {
                "description": "The column <code><a href=\"Xmla.Dataset.Axis.html#class_Axis\">Xmla.Dataset.Axis</a></code> object.",
                "type": "Xmla.Dataset.Axis"
            },
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5696,
            "description": "Determine if the column axis exists.",
            "itemtype": "method",
            "name": "hasColumnAxis",
            "return": {
                "description": "<code>true</code> if the column axis exists, <code>false</code> if it doesn't exist.",
                "type": "Boolean"
            },
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5704,
            "description": "Get the Row axis. This is the second axis, and has ordinal 1. If the row axis doesn't exist, an <code>INVALID_AXIS</code> exception is thrown.\nTo prevent an exception from being thrown, you should call the <code><a href=\"#method_hasRowAxis\">hasRowAxis()</a></code> method to determine if the axis exists.",
            "itemtype": "method",
            "name": "getRowAxis",
            "return": {
                "description": "The row <code><a href=\"Xmla.Dataset.Axis.html#class_Axis\">Xmla.Dataset.Axis</a></code> object.",
                "type": "Xmla.Dataset.Axis"
            },
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5713,
            "description": "Determine if the row axis exists.",
            "itemtype": "method",
            "name": "hasRowAxis",
            "return": {
                "description": "<code>true</code> if the row axis exists, <code>false</code> if it doesn't exist.",
                "type": "Boolean"
            },
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5721,
            "description": "Get the Page axis. This is the third axis, and has ordinal 2. If the page axis doesn't exist, an <code>INVALID_AXIS</code> exception is thrown.\nTo prevent an exception from being thrown, you should call the <code><a href=\"#method_hasPageAxis\">hasPageAxis()</a></code> method to determine if the axis exists.",
            "itemtype": "method",
            "name": "getPageAxis",
            "return": {
                "description": "The page <code><a href=\"Xmla.Dataset.Axis.html#class_Axis\">Xmla.Dataset.Axis</a></code> object.",
                "type": "Xmla.Dataset.Axis"
            },
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5730,
            "description": "Determine if the page axis exists.",
            "itemtype": "method",
            "name": "hasPageAxis",
            "return": {
                "description": "<code>true</code> if the page axis exists, <code>false</code> if it doesn't exist.",
                "type": "Boolean"
            },
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5738,
            "description": "Get the Section axis. This is the fourth axis, and has ordinal 3. If the section axis doesn't exist, an <code>INVALID_AXIS</code> exception is thrown.\nTo prevent an exception from being thrown, you should call the <code><a href=\"#method_hasPageAxis\">hasSectionAxis()</a></code> method to determine if the axis exists.",
            "itemtype": "method",
            "name": "getSectionAxis",
            "return": {
                "description": "The section <code><a href=\"Xmla.Dataset.Axis.html#class_Axis\">Xmla.Dataset.Axis</a></code> object.",
                "type": "Xmla.Dataset.Axis"
            },
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5747,
            "description": "Determine if the section axis exists.",
            "itemtype": "method",
            "name": "hasSectionAxis",
            "return": {
                "description": "<code>true</code> if the section axis exists, <code>false</code> if it doesn't exist.",
                "type": "Boolean"
            },
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5755,
            "description": "Get the Chapter axis. This is the fifth axis, and has ordinal 4. If the chapter axis doesn't exist, an <code>INVALID_AXIS</code> exception is thrown.\nTo prevent an exception from being thrown, you should call the <code><a href=\"#method_hasChapterAxis\">hasChapterAxis()</a></code> method to determine if the axis exists.",
            "itemtype": "method",
            "name": "getChapterAxis",
            "return": {
                "description": "The chapter <code><a href=\"Xmla.Dataset.Axis.html#class_Axis\">Xmla.Dataset.Axis</a></code> object.",
                "type": "Xmla.Dataset.Axis"
            },
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5764,
            "description": "Determine if the chapter axis exists.",
            "itemtype": "method",
            "name": "hasChapterAxis",
            "return": {
                "description": "<code>true</code> if the chapter axis exists, <code>false</code> if it doesn't exist.",
                "type": "Boolean"
            },
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5772,
            "description": "Get the Slicer axis. This is the axis that appears in the <code>WHERE</code> clause of the MDX statement.",
            "itemtype": "method",
            "name": "getSlicerAxis",
            "return": {
                "description": "The slicer <code><a href=\"Xmla.Dataset.Axis.html#class_Axis\">Xmla.Dataset.Axis</a></code> object.",
                "type": "Xmla.Dataset.Axis"
            },
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5780,
            "description": "Determine if the slicer axis exists.",
            "itemtype": "method",
            "name": "hasSlicerAxis",
            "return": {
                "description": "<code>true</code> if the slicer axis exists, <code>false</code> if it doesn't exist.",
                "type": "Boolean"
            },
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5788,
            "description": "Get the Cellset object.",
            "itemtype": "method",
            "name": "getCellset",
            "return": {
                "description": "The <code><a href=\"Xmla.Dataset.Cellset.html#class_Cellset\">Xmla.Dataset.Cellset</a></code> object.",
                "type": "Xmla.Dataset.Cellset"
            },
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5796,
            "description": "<p>Calculate the cellset ordinal for the argument tuple indexes.</p>\n<p>This method accepts a variable number of tuple indexes. One integer argument must be passed for each proper axis (excluding the slicer axis).\nEach integer arguments represent the index of a tuple on the respective axis.</p>\n<p>The arguments must be specified by descending axis order. So if the data set has two axes (a row and a column axis),\nthis method expects the tuple index of a tuple on the row axis first, and after that, the tuple index on the column axis.</p>\n<p>The method returns an integer that represents the ordinal of the cell identified by the tuples specified by the tuple index arguments.\nOne could use this ordinal as argument to the <code><a href=\"Xmla.Dataset.Cellset.html#method_getByOrdinal\">getByOrdinal()</a></code> method of this Dataset's <code><a href=\"Xmla.Dataset.Cellset.html#class_Cellset\">Cellset</a></code>.</p>\n<p>Instead of calling this method and passing the result into the Cellsets <code><a href=\"Xmla.Dataset.Cellset.html#method_getByOrdinal\">getByOrdinal()</a></code> method,\nyou can call the <code><a href=\"Xmla.Dataset.Cellset.html#method_getByTupleIndexes\">getByTupleIndexes()</a></code> method  of this Dataset's <code><a href=\"Xmla.Dataset.Cellset.html#class_Cellset\">Cellset</a></code>.</p>",
            "itemtype": "method",
            "name": "cellOrdinalForTupleIndexes",
            "params": [
                {
                    "name": "A",
                    "description": "variable number of integer tuple indexes. Tuple indexes should be passed in descending order of axes.",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "The ordinal number that identifies the cell from this Dataset's <code><a href=\"Xmla.Dataset.Cellset.html#class_Cellset\">Xmla.Dataset.Cellset</a></code> that belongs to the tuples identified by the arguments.",
                "type": "Int"
            },
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5813,
            "description": "Gets all of the XML data into one JS object. The object consists of the following members:\n<ul>\n <li><code>axes</code>: An array of objects that represent the query axes (but not the slicer axis).\n Each axis has a <code>positions</code> member which is an array of tuples, and a <code>hierarchies</code> member, which is an array of hierarchies.</li>\n <li><code>slicerAxis</code>: An object that represents the slicer axis, or null if there is no slicer axis.</li>\n <li><code>cells</code>: An array of cell objects, representing the cellset.</li>\n</ul>",
            "itemtype": "method",
            "name": "fetchAsObject",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5860,
            "description": "Cleanup this Dataset object.",
            "itemtype": "method",
            "name": "close",
            "class": "Xmla.Dataset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5961,
            "description": "Resets this axis object.\nThis resets internal counters for iterating through the hierarchies and tuples of this Axis object.\nWhen using hierarchy and tuple iterators to traverse the entire axis, you typically won't need to call this method yourself.",
            "itemtype": "method",
            "name": "reset",
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5972,
            "description": "Checks if there are more hierarchies to iterate through.\nYou can use this method along with the <code><a href=\"#method_nextHierarchy\">nextHierarchy()</a></code> method to drive a loop\nto iterate through the hierarchies contained in this axis object.",
            "itemtype": "method",
            "name": "hasMoreHierarchies",
            "return": {
                "description": "Returns <code>true</code> if there are more hierarchies to vist, <code>false</code> if all hierarchies are traversed.",
                "type": "Boolean"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5982,
            "description": "Moves the internal hierarchy pointer forward.\nYou can use this method along with the <code><a href=\"#method_hasMoreHierarchies\">hasMoreHierarchies()</a></code> method to drive a loop\nto iterate through the hierarchies contained in this axis object.",
            "itemtype": "method",
            "name": "nextHierarchy",
            "return": {
                "description": "Returns the index of current hierarchy.",
                "type": "Int"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 5992,
            "description": "<p>Calls a callback function for each hierarchy in this Axis object.</p>\n<p>The callback function is passed an object that represents the current hierarchy. This object has the following structure:</p><ul>\n  <li><code>index</code> <code>int</code> The ordinal identifying this hierarchy</li>\n  <li><code>name</code> <code>string</code> The name of this hierarchy</li>\n</ul>\n<p>The callback may return <code>false</code> to abort iteration. If the callback does not return <code>false</code>, iteration will resume until all hierarchies are traversed.</p>",
            "params": [
                {
                    "name": "callback.",
                    "description": "A function that will be called for each hierarchy. The hierarchy is passed as an object as the first argument to the callback.",
                    "type": "Function()"
                },
                {
                    "name": "scope.",
                    "description": "The object that will be used as scope when executing the callback function. If this is undefined or <code>null</code>, the Axis' <code>this</code> pointer will be used.",
                    "type": "Object"
                },
                {
                    "name": "args.",
                    "description": "Additional data to be passed to the callback function..",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "eachHierarchy",
            "return": {
                "description": "Returns <code>true</code> if all hierarchies were visited and the callback did not return <code>false</code>. Returns <code>false</code> if the callback returned <code>false</code> and further iteration was aborted.",
                "type": "Boolean"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6020,
            "description": "Checks if there are more tuples to iterate through.\nYou can use this method along with the <code><a href=\"#method_nextTuple\">nextTuple()</a></code> method to drive a loop\nto iterate through the tuples contained in this axis object.",
            "itemtype": "method",
            "name": "hasMoreTuples",
            "return": {
                "description": "Returns <code>true</code> if there are more tuples to vist, <code>false</code> if all tuples are traversed.",
                "type": "Boolean"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6030,
            "description": "Moves the internal tuple pointer forward.\nYou can use this method along with the <code><a href=\"#method_nextTuple\">nextTuple()</a></code> method to drive a loop\nto iterate through the tuples contained in this axis object.",
            "itemtype": "method",
            "name": "nextTuple",
            "return": {
                "description": "Returns the index of current tuple.",
                "type": "Int"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6042,
            "description": "Gets the number of tuples in this axis object.",
            "itemtype": "method",
            "name": "tupleCount",
            "return": {
                "description": "Returns the number of tuples in this Axis object.",
                "type": "Int"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6050,
            "description": "Returns the current value of the tuple pointer.",
            "itemtype": "method",
            "name": "tupleIndex",
            "return": {
                "description": "Returns the current value of the tuple pointer.",
                "type": "Int"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6058,
            "description": "Get the current tuple as an object. The tuple object has the following structure: <ul>\n    <li><code>index</code> <code>int</code>: the ordinal of this tuple within its axis</li>\n    <li><code>hierarchies</code> <code>object</code>: A map of members using hierarchy names as keys, and member objects as values</li>\n    <li><code>members</code> <code>array</code>: An array of members in order of hierarchy order.</li>\n</ul>",
            "itemtype": "method",
            "name": "getTuple",
            "return": {
                "description": "An object representing the current tuple..",
                "type": "Object"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6079,
            "description": "<p>Calls a callback function for each tuple in this Axis object.</p>\n<p>The callback function is passed an object that represents the current tuple. (see <code><a href=\"#method_getTuple\">getTuple()</a></code> for a description of the tuple format.)</p>\n<p>The callback may return <code>false</code> to abort iteration. If the callback does not return <code>false</code>, iteration will resume until all tuples are traversed.</p>",
            "params": [
                {
                    "name": "callback.",
                    "description": "A function that will be called for each tuple. The tuple is passed as an object as the first argument to the callback.",
                    "type": "Function()"
                },
                {
                    "name": "scope.",
                    "description": "The object that will be used as scope when executing the callback function. If this is undefined or <code>null</code>, the Axis' <code>this</code> pointer will be used.",
                    "type": "Object"
                },
                {
                    "name": "args.",
                    "description": "Additional data to be passed as the second argument to the callback function.",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "eachTuple",
            "return": {
                "description": "Returns <code>true</code> if all tuples were visited and the callback did not return <code>false</code>. Returns <code>false</code> if the callback returned <code>false</code> and further iteration was aborted.",
                "type": "Boolean"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6105,
            "description": "Returns the hierarchies of this Axis object.",
            "itemtype": "method",
            "name": "getHierarchies",
            "return": {
                "description": "An array of hierarchies contained in this Axis.",
                "type": "Array"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6113,
            "description": "Returns the names of the hierarchies of this Axis object.",
            "itemtype": "method",
            "name": "getHierarchyNames",
            "return": {
                "description": "An array of names of the hierarchies contained in this Axis.",
                "type": "Array"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6123,
            "description": "Gets the number of hierarchies in this axis object.",
            "itemtype": "method",
            "name": "hierarchyCount",
            "return": {
                "description": "Returns the number of hierarchies in this Axis object.",
                "type": "Int"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6131,
            "description": "Gets the index of the hierarchy identified by the specified name, or the index of the current hierarchy (in case the name argument is omitted).",
            "itemtype": "method",
            "name": "hierarchyIndex",
            "params": [
                {
                    "name": "hierarchyName",
                    "description": "The name of the hierarchy for which the index is to be retrieved. When omitted, the index of the current hierarchy is returned.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The index of the hierarchy specified by the name passed as argument, or the index of the current hierarchy if the name argument is omitted.",
                "type": "Int"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6148,
            "description": "Gets the name of the hierarchy identified by the specified index, or the name of the current hierarchy (in case the index argument is omitted).",
            "itemtype": "method",
            "name": "hierarchyName",
            "params": [
                {
                    "name": "hierarchyIndex",
                    "description": "The ordinal of the hierarchy for which the name is to be retrieved. When omitted, the name of the current hierarchy is returned.",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "The name of the hierarchy specified by the argument index, or the name of the current hierarchy if the index argument is omitted.",
                "type": "String"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6166,
            "description": "Gets the hierarchy identified by the specified index or hierarchyName, or the current hierarchy (in case the argument is omitted).",
            "itemtype": "method",
            "name": "hierarchy",
            "params": [
                {
                    "name": "hierarchyIndexOrName",
                    "description": "The ordinal or name of the hierarchy that is to be retrieved. When omitted, the the current hierarchy is returned.",
                    "type": "Int|string"
                }
            ],
            "return": {
                "description": "The hierarchy specified by the argument index or name, or the current hierarchy if the argument is omitted.",
                "type": "String"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6196,
            "description": "Gets the member for the specified hierarchy from the current tuple. The member has the following structure: <ul>\n  <li><code>index</code> - <code>int</code></li>\n  <li><code>hierarchy</code> - <code>string</code>. Name of the hiearchy to which this member belongs.</li>\n  <li><code>UName</code> - <code>string</code>. Unique name of this member.</li>\n  <li><code>Caption</code> - <code>string</code>. Human friendly name for this member.</li>\n  <li><code>LName</code> - <code>string</code>. Name of the level to which this member belongs.</li>\n  <li><code>LNum</code> - <code>int</code>. Number of the level to which this member belongs. Typically, the top-level is level 0, its children are level 1 and so on.</li>\n  <li><code>DisplayInfo</code> - <code>int</code>.</li>\n</ul>\n<p>\nThe <code>index</code> and <code>hierarchy</code> properties are non standard and always added by Xmla4js.\nThe properties <code>UName</code>, <code>Caption</code>, <code>LName</code> and <code>LNum</code> are defined by the XML/A standard, and should always be present.\nThe property <code>DisplayInfo</code> is non-standard, but often available.\nOther properties may be present depending on the specific XML/A provider.\n</p>",
            "itemtype": "method",
            "name": "member",
            "params": [
                {
                    "name": "hierarchyIndexOrName",
                    "description": "The ordinal or name of the hierarchy from which the member is to be retrieved. When omitted, the the current hierarchy is returned.",
                    "type": "Int|string"
                }
            ],
            "return": {
                "description": "The member of the current tuple that belongs to the specified hierarchy, If the argument is omitted the member that belongs current hierarchy is retrieved from the current tuple.",
                "type": "Object"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6269,
            "description": "Gets the current tuple as an array of members.\nFor a description of the structure of the member elements, see <code><a href=\"#method_member\">member()</a></code>.",
            "itemtype": "method",
            "name": "readAsArray",
            "params": [
                {
                    "name": "array",
                    "description": "An existing array to store the members in. If omitted, a new array is returned.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of members that represents the current tuple.",
                "type": "Array"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6282,
            "description": "Gets the current tuple as an object.\nThe object's keys are the hierarchy names, and the members of the current tuple are used as values for the keys.\nFor a description of the structure of the member elements, see <code><a href=\"#method_member\">member()</a></code>.",
            "itemtype": "method",
            "name": "readAsObject",
            "params": [
                {
                    "name": "object",
                    "description": "An existing object to store the tuple data in. If omitted, a new object is returned.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object that represents the current tuple.",
                "type": "Object"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6296,
            "description": "Gets the current tuple as an array of members and advances the internal tuple pointer.\nFor a description of the structure of the member elements, see <code><a href=\"#method_member\">member()</a></code>.",
            "itemtype": "method",
            "name": "fetchAsArray",
            "params": [
                {
                    "name": "array",
                    "description": "An existing array to store the members in. If omitted, a new array is returned.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of members that represents the current tuple, or <code>false</code> if there are no more tuples.",
                "type": "Array|false"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6311,
            "description": "Gets the current tuple as an object and advances the current tuple pointer.\nThe object's keys are the hierarchy names, and the members of the current tuple are used as values for the keys.\nFor a description of the structure of the member elements, see <code><a href=\"#method_member\">member()</a></code>.",
            "itemtype": "method",
            "name": "fetchAsObject",
            "params": [
                {
                    "name": "object",
                    "description": "An existing object to store the tuple data in. If omitted, a new object is returned.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object that represents the current tuple.",
                "type": "Object"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6327,
            "description": "Fetches all tuples and returns them as an array of arrays.\nEach element of the returned array is an array of member objects.\nFor a description of the structure of the member elements, see <code><a href=\"#method_member\">member()</a></code>.",
            "itemtype": "method",
            "name": "fetchAllAsArray",
            "params": [
                {
                    "name": "rows",
                    "description": "An existing array to store the tuples in. If omitted, a new array is returned.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of arrays representing all tuples that belong to this axis.",
                "type": "[[array]]"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6341,
            "description": "Fetches all tuples and returns them as an array of objects.\nEach element of the returned array is a tuple object.\nThe object's keys are the hierarchy names, and the members of the current tuple are used as values for the keys.\nFor a description of the structure of the member elements, see <code><a href=\"#method_member\">member()</a></code>.",
            "itemtype": "method",
            "name": "fetchAllAsObject",
            "params": [
                {
                    "name": "rows",
                    "description": "An existing array to store the tuples in. If omitted, a new array is returned.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of arrays representing all tuples that belong to this axis.",
                "type": "[[object]]"
            },
            "class": "Xmla.Dataset.Axis",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6445,
            "description": "Returns the number of cells contained in this cellset.\nThis is the number of cells that is actually present in the cellset - not the number of logical cells.\nThe nuber of logical cells can be be calculated by multiplying the tuple counts of all axes of the data set.\nThe XML/A provider will typically not return empty cells, hence, the cellCount may be less than the logical cell count.",
            "itemtype": "method",
            "name": "cellCount",
            "return": {
                "description": "The number of cells in this cellset.",
                "type": "Int"
            },
            "class": "Xmla.Dataset.Cellset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6456,
            "description": "Resets the internal cell pointer to the argument, or to 0 if the argument is omitted.\nNormally, you shouldn't have to call this method yourself.",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "idx",
                    "description": "",
                    "type": "Int"
                }
            ],
            "class": "Xmla.Dataset.Cellset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6466,
            "description": "Check if there are cells to iterate through.",
            "itemtype": "method",
            "name": "hasMoreCells",
            "return": {
                "description": "<code>true</code> if there are more cells to iterate, <code>false</code> if there are no more cells to iterate.",
                "type": "Boolean"
            },
            "class": "Xmla.Dataset.Cellset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6474,
            "description": "Advance to the next (physical) cell.\nNote that this method may appear to be skipping cells. This happens when the XML/A provider omits empty cells in the response.",
            "itemtype": "method",
            "name": "nextCell",
            "return": {
                "description": "returns the ordinal of the next cell, or -1 if there was no next cell.",
                "type": "Int"
            },
            "class": "Xmla.Dataset.Cellset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6491,
            "description": "Returns the internal cell pointer. This is the fysical cell pointer.\nTo get the logical cell pointer, see <code><a href=\"#method_cellOrdinal\">cellOrdinal()</a></code>",
            "itemtype": "method",
            "name": "curr",
            "return": {
                "description": "returns the internal cell pointer.",
                "type": "Int"
            },
            "class": "Xmla.Dataset.Cellset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6500,
            "description": "Check if the cell has the specified property.\nXML/A defines these standard properties:<ul>\n  <li><code>Value</code></li>\n  <li><code>FmtValue</code></li>\n  <li><code>ForeColor</code></li>\n  <li><code>BackColor</code></li>\n</ul>\nWhether all these properties are returned depends on the XML/A provider and on the query.\nThe XML/A provider may return specific additional properties.",
            "itemtype": "method",
            "name": "hasCellProperty",
            "params": [
                {
                    "name": "propertyName",
                    "description": "The name of the property to check for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns <code>true</code> if the current cell has the specified property, <code>false</code> if it doesn't.",
                "type": "Boolean"
            },
            "class": "Xmla.Dataset.Cellset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6517,
            "description": "Return the value of the current property of the current cell.\nXML/A defines these standard properties:<ul>\n  <li><code>Value</code></li>\n  <li><code>FmtValue</code></li>\n  <li><code>ForeColor</code></li>\n  <li><code>BackColor</code></li>\n</ul>\nWhether all these properties are returned depends on the XML/A provider and on the query.\nThe XML/A provider may return specific additional properties.",
            "itemtype": "method",
            "name": "cellProperty",
            "params": [
                {
                    "name": "propertyName",
                    "description": "The name of the property to retrieve.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns the value of the specified property of the current cell.",
                "type": "Mixed"
            },
            "class": "Xmla.Dataset.Cellset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6549,
            "description": "Returns the ordinal number of the current cell.\nThe ordinal is the logical cell pointer, which may be different than the physical cell pointer.\nTo get the physical cell pointer, see <code><a href=\"#method_curr\">curr()</a></code>",
            "itemtype": "method",
            "name": "cellOrdinal",
            "return": {
                "description": "returns the logical cell pointer.",
                "type": "Int"
            },
            "class": "Xmla.Dataset.Cellset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6610,
            "description": "Reads the current cell into the specified object.",
            "itemtype": "method",
            "name": "readCell",
            "params": [
                {
                    "name": "object",
                    "description": "An existing object to use for the current cell. If omitted, a new object will be created.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object that represents the current cell.",
                "type": "Object"
            },
            "class": "Xmla.Dataset.Cellset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6620,
            "description": "Iterate through each cell.",
            "itemtype": "method",
            "name": "eachCell",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function()"
                },
                {
                    "name": "scope",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Xmla.Dataset.Cellset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6643,
            "description": "Get a cell by its physical index.\nThis method should typically not be called by clients.\nInstead, they should use <code><a href=\"#method_getByOrdinal\">getByOrdinal()</a></code>",
            "itemtype": "method",
            "name": "getByIndex",
            "params": [
                {
                    "name": "index",
                    "description": "- the physical index of the cell within the cellset.",
                    "type": "Int"
                },
                {
                    "name": "object",
                    "description": "- optional. An object to copy the properties of the specified cell to. If omitted, a new object will be returned instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object that represents the cell.",
                "type": "Object"
            },
            "class": "Xmla.Dataset.Cellset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6656,
            "description": "Get a cell by its logical index.",
            "itemtype": "method",
            "name": "getByOrdinal",
            "params": [
                {
                    "name": "ordinal",
                    "description": "- the ordinal number of the cell to retrieve.",
                    "type": "Int"
                },
                {
                    "name": "object",
                    "description": "- optional. An object to copy the properties of the specified cell to. If omitted, a new object will be returned instead.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object that represents the cell.",
                "type": "Object"
            },
            "class": "Xmla.Dataset.Cellset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6675,
            "description": "Calculate the ordinal based on the specified tuple indexes.",
            "itemtype": "method",
            "name": "cellOrdinalForTupleIndexes",
            "params": [
                {
                    "name": "tuple",
                    "description": "index - a variable list of integer arguments. Arguments represent the index of a tuple on the query axes. Tuple indexes should be specified by descending order of axes. For example, if you have a DataSet with 2 Axes, pass the row tuple index as the first argument, and the column tuple index as the last argument.",
                    "type": "int..."
                }
            ],
            "return": {
                "description": "The ordinal number for this combination of tuple indexes. This return value can be used as argument for <code><a href=\"#method_getByOrdinal\">getByOrdinal()</a></code>",
                "type": "Int"
            },
            "class": "Xmla.Dataset.Cellset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6684,
            "description": "Get the cell corresponding to the specified tuple indexes.",
            "itemtype": "method",
            "name": "getByTupleIndexes",
            "params": [
                {
                    "name": "ordinal",
                    "description": "",
                    "type": "int..."
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Xmla.Dataset.Cellset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6693,
            "description": "Close this cellset.",
            "itemtype": "method",
            "name": "close",
            "class": "Xmla.Dataset.Cellset",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6743,
            "description": "Can appear as value for the <code><a href=\"#property_type\">type</a></code> property of instances of the <code><a href=\"#class_Xmla.Exception\">Xmla.Exception</a></code> class,\nand indicates that this <code>Xmla.Exception</code> signals a warning.",
            "itemtype": "property",
            "name": "TYPE_WARNING",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>warning</code>",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6754,
            "description": "Can appear as value for the <code><a href=\"#property_type\">type</a></code> property of instances of the <code><a href=\"#class_Xmla.Exception\">Xmla.Exception</a></code> class,\nand indicates that this <code>Xmla.Exception</code> signals an error.",
            "itemtype": "property",
            "name": "TYPE_ERROR",
            "static": 1,
            "final": 1,
            "type": "string",
            "default": "<code>error</code>",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6768,
            "description": "Exception code indicating a <code>requestType</code> option was expected but ommitted.",
            "itemtype": "property",
            "name": "MISSING_REQUEST_TYPE_CDE",
            "static": 1,
            "final": 1,
            "type": "{int}",
            "default": "<code>-1</code>",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6782,
            "description": "Exception code indicating a <code>statement</code> option was expected but ommitted.",
            "itemtype": "property",
            "name": "MISSING_STATEMENT_CDE",
            "static": 1,
            "final": 1,
            "type": "{int}",
            "default": "<code>-2</code>",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6797,
            "description": "Exception code indicating a <code>url</code> option was expected but ommitted.",
            "itemtype": "property",
            "name": "MISSING_URL_CDE",
            "static": 1,
            "final": 1,
            "type": "{int}",
            "default": "<code>-3</code>",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6812,
            "description": "Exception code indicating a <code>events</code> were expected but ommitted.",
            "itemtype": "property",
            "name": "NO_EVENTS_SPECIFIED_CDE",
            "static": 1,
            "final": 1,
            "type": "{int}",
            "default": "<code>-4</code>",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6827,
            "description": "Exception code indicating a <code>events</code> were specifeid in the wrong format.",
            "itemtype": "property",
            "name": "WRONG_EVENTS_FORMAT_CDE",
            "static": 1,
            "final": 1,
            "type": "{int}",
            "default": "<code>-5</code>",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6842,
            "description": "Exception code indicating that the event name was unrecognized.",
            "itemtype": "property",
            "name": "UNKNOWN_EVENT_CDE",
            "static": 1,
            "final": 1,
            "type": "{int}",
            "default": "<code>-6</code>",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6856,
            "description": "Exception code indicating that no proper handler was passed for the events.",
            "itemtype": "property",
            "name": "INVALID_EVENT_HANDLER_CDE",
            "static": 1,
            "final": 1,
            "type": "{int}",
            "default": "<code>-7</code>",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6870,
            "description": "Exception code indicating that the rrepsonse could not be parsed",
            "itemtype": "property",
            "name": "ERROR_PARSING_RESPONSE_CDE",
            "static": 1,
            "final": 1,
            "type": "{int}",
            "default": "<code>-8</code>",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6884,
            "description": "Exception code indicating the field name is not valid.",
            "itemtype": "property",
            "name": "INVALID_FIELD_CDE",
            "static": 1,
            "final": 1,
            "type": "{int}",
            "default": "<code>-9</code>",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6899,
            "description": "Exception code indicating a general XMLHttpRequest error.\nIf this error occurs, the data object of the exception will have these members:\n<ul>\n    <li>request: the options that make up the original HTTP request</li>\n    <li>status: the HTTP status code</li>\n    <li>statusText: the HTTP status text</li>\n</ul>",
            "itemtype": "property",
            "name": "HTTP_ERROR_CDE",
            "static": 1,
            "final": 1,
            "type": "{int}",
            "default": "<code>-10</code>",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6919,
            "description": "Exception code indicating the hierarchy name is not valid.",
            "itemtype": "property",
            "name": "INVALID_HIERARCHY_CDE",
            "static": 1,
            "final": 1,
            "type": "{int}",
            "default": "<code>-11</code>",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6934,
            "description": "Exception code indicating a problem reading a member property",
            "itemtype": "property",
            "name": "UNEXPECTED_ERROR_READING_MEMBER_CDE",
            "static": 1,
            "final": 1,
            "type": "{int}",
            "default": "<code>-12</code>",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6949,
            "description": "Exception code indicating the requested axis does not exist",
            "itemtype": "property",
            "name": "INVALID_AXIS",
            "static": 1,
            "final": 1,
            "type": "{int}",
            "default": "<code>-13</code>",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6964,
            "description": "Exception code indicating illegal number of axis arguments",
            "itemtype": "property",
            "name": "ILLEGAL_ARGUMENT",
            "static": 1,
            "final": 1,
            "type": "{int}",
            "default": "<code>-14</code>",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 6979,
            "description": "Exception code indicating that we couldn't instantiate a xml http request object",
            "itemtype": "property",
            "name": "ERROR_INSTANTIATING_XMLHTTPREQUEST",
            "static": 1,
            "final": 1,
            "type": "{int}",
            "default": "<code>-15</code>",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 7006,
            "description": "This propery indicates what kind of exception occurred. It can have one of the following values: <dl>\n    <dt><code><a href=\"property_TYPE_WARNING\">TYPE_WARNING</a></code></dt><dd>Indicates a warning</dd>\n    <dt><code><a href=\"property_TYPE_ERROR\">TYPE_ERROR</a></code></dt><dd>Indicates an error</dd>\n</dl>",
            "itemtype": "property",
            "name": "type",
            "type": "{string}",
            "default": "{null}",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 7016,
            "description": "A code that can be used to identify this particular kind of exception.",
            "itemtype": "property",
            "name": "code",
            "type": "{int}",
            "default": "{null}",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 7023,
            "description": "A human readable message that describes the nature of the error or warning.",
            "itemtype": "property",
            "name": "message",
            "type": "{string}",
            "default": "{null}",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 7030,
            "description": "A name that indicates in what component (on the client or server side) this error or warning occurred.",
            "itemtype": "property",
            "name": "source",
            "type": "{string}",
            "default": "{null}",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 7037,
            "description": "A path or url that points to a document that contains more information about this error.",
            "itemtype": "property",
            "name": "helpfile",
            "type": "{string}",
            "default": "{null}",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 7044,
            "description": "Additional data captured when the exception was instantiated.\nThe type of information stored here is dependent upon the nature of the error.",
            "itemtype": "property",
            "name": "data",
            "type": "{string}",
            "default": "{null}",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 7055,
            "description": "A reference to the built-in <code>arguments</code> array of the function that is throwing the exception\nThis can be used to get a \"stack trace\"",
            "itemtype": "property",
            "name": "args",
            "type": "{array}",
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 7062,
            "description": "Returns a string representing this exception",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representing this exception"
            },
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 7070,
            "description": "Get a stack trace.",
            "itemtype": "method",
            "name": "getStackTrace",
            "return": {
                "description": "an array of objects describing the function on the stack"
            },
            "class": "Xmla.Exception",
            "module": "xmla"
        },
        {
            "file": "src/Xmla.js",
            "line": 7088,
            "description": "Register Xmla.\nIn an amd (https://github.com/amdjs/amdjs-api/wiki/AMD) environment, use the define function\nOtherwise, add it to the global window variable.\nFor server side environemnts that do not have a proper window object,\nsimply create a global variable called window and assign an object to it that you want to function as the Xmla container.",
            "class": "Xmla.Exception",
            "module": "xmla"
        }
    ]
}